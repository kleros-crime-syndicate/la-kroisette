{
  "address": "0xC0b752bc1e025748B92A18d5FF3E31853F528522",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wNative",
          "type": "address"
        },
        {
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "contract IDisputeTemplateRegistry",
          "name": "_templateRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_templateData",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_templateDataMappings",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "_homeEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFundsForLayerZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "ArbitrationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "ArbitrationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "ArbitrationFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxPrevious",
          "type": "uint256"
        }
      ],
      "name": "ArbitrationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_arbitratorDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_templateUri",
          "type": "string"
        }
      ],
      "name": "DisputeRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_ruling",
          "type": "bytes32"
        }
      ],
      "name": "RulingRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUMBER_OF_CHOICES_FOR_ARBITRATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFUSE_TO_ARBITRATE_REALITIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "_decodeArbitrationAcknowledgement",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "_decodeArbitrationCancelation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "_decodeMessage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arbitrationCreatedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arbitrationIDToDisputeExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arbitrationIDToRequester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "arbitrationRequests",
      "outputs": [
        {
          "internalType": "enum RealitioForeignProxyLZ.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint248",
          "name": "deposit",
          "type": "uint248"
        },
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "answer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitratorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitratorExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_templateData",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_templateDataMappings",
          "type": "string"
        }
      ],
      "name": "changeDisputeTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeIDToDisputeDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "arbitrationID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        }
      ],
      "name": "externalIDtoLocalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "handleFailedDisputeCreation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "handleFailedDisputeCreationCustomParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numberOfRulingOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "questionIDToArbitrationID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "receiveArbitrationAcknowledgement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "receiveArbitrationCancelation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "relayRule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "relayRuleCustomParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrevious",
          "type": "uint256"
        }
      ],
      "name": "requestArbitration",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrevious",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "requestArbitrationCustomParameters",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templateRegistry",
      "outputs": [
        {
          "internalType": "contract IDisputeTemplateRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe537caf3c5c13369cd084a6cf901a8f32908e04a4b0dd157770e77778b0e2c1a",
  "receipt": {
    "to": null,
    "from": "0x853CD77ea63dbb57423821f6ca2E014368F2058a",
    "contractAddress": "0xC0b752bc1e025748B92A18d5FF3E31853F528522",
    "transactionIndex": 5,
    "gasUsed": "3488141",
    "logsBloom": "0x
    "blockHash": "0x89a77374b987a0d56d78be8f42506fe584f1830fbf1234451338f3db6b0832d2",
    "transactionHash": "0xe537caf3c5c13369cd084a6cf901a8f32908e04a4b0dd157770e77778b0e2c1a",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 170589659,
        "transactionHash": "0xe537caf3c5c13369cd084a6cf901a8f32908e04a4b0dd157770e77778b0e2c1a",
        "address": "0xC0b752bc1e025748B92A18d5FF3E31853F528522",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000853cd77ea63dbb57423821f6ca2e014368f2058a"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x89a77374b987a0d56d78be8f42506fe584f1830fbf1234451338f3db6b0832d2"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 170589659,
        "transactionHash": "0xe537caf3c5c13369cd084a6cf901a8f32908e04a4b0dd157770e77778b0e2c1a",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000c0b752bc1e025748b92a18d5ff3e31853f528522000000000000000000000000853cd77ea63dbb57423821f6ca2e014368f2058a",
        "logIndex": 12,
        "blockHash": "0x89a77374b987a0d56d78be8f42506fe584f1830fbf1234451338f3db6b0832d2"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 170589659,
        "transactionHash": "0xe537caf3c5c13369cd084a6cf901a8f32908e04a4b0dd157770e77778b0e2c1a",
        "address": "0xe763d31Cb096B4bc7294012B78FC7F148324ebcb",
        "topics": [
          "0x00f7cd7255d1073b4e136dd477c38ea0020c051ab17110cc5bfab0c840ff9924",
          "0x0000000000000000000000000000000000000000000000000000000000000005",
          "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003277b0a20202020227469746c65223a202241207265616c6974792e657468207175657374696f6e222c0a20202020226465736372697074696f6e223a202241207265616c6974792e657468207175657374696f6e20686173206265656e2072616973656420746f206172626974726174696f6e2e222c0a20202020227175657374696f6e223a20227b7b207175657374696f6e207d7d222c0a202020202274797065223a20227b7b2074797065207d7d222c0a2020202022616e7377657273223a205b0a2020202020207b7b2320616e7377657273207d7d0a2020202020207b0a2020202020202020227469746c65223a20227b7b207469746c65207d7d222c0a2020202020202020226465736372697074696f6e223a20227b7b206465736372697074696f6e207d7d222c0a2020202020202020226964223a20227b7b206964207d7d222c0a2020202020202020227265736572766564223a207b7b207265736572766564207d7d0a2020202020207d7b7b5e206c617374207d7d2c7b7b2f206c617374207d7d0a2020202020207b7b2f20616e7377657273207d7d20202020202020200a202020205d2c0a2020202022706f6c696379555249223a20222f697066732f516d5a35586156325256674241447135714d7062754577674375505a64526743657538726847744a574c5636797a222c0a202020202266726f6e74656e6455726c223a202268747470733a2f2f7265616c6974792e6574682e6c696d6f2f6170702f23212f7175657374696f6e2f7b7b207265616c69747941646472657373207d7d2d7b7b207175657374696f6e4964207d7d222c0a202020202261726269747261746f72436861696e4944223a2022343231363134222c0a202020202261726269747261746f7241646472657373223a2022307845383434323330376433366539626636614232374631413030394639354345384531314333343739222c0a202020202263617465676f7279223a20224f7261636c65222c0a20202020226c616e67223a2022656e5f5553222c0a202020202273706563696669636174696f6e223a20224b49503939222c0a202020202276657273696f6e223a2022312e30220a7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065f5b0a20207b0a202020202274797065223a20226a736f6e222c0a202020202276616c7565223a207b0a202020202020227175657374696f6e223a20222a2a4b6c65726f73204d6f6465726174653a2a2a204469642074686520757365722c202a2a646567656e617065362a2a202849443a2031353534333435303830292c20627265616b207468652054656c656772616d2067726f75702c202a2a2a5b4b6c65726f732054726164696e672047726f75705d28292a2a2a202849443a202d31303031313531343732313732292c202a2a2a5b72756c65735d2868747470733a2f2f63646e2e6b6c65726f732e6c696e6b2f697066732f516d653351626a39724b554e48556539766a397271434c6e54565543574b793259667665514638486975575153752f4b6c65726f732532304d6f646572617465253230436f6d6d756e69747925323052756c65732e706466292a2a2a2064756520746f20636f6e647563742072656c6174656420746f20746865202a2a2a5b6d6573736167655d2868747470733a2f2f742e6d652f632f313135313437323137322f313136363632292a2a2a20282a2a2a5b6261636b75705d2868747470733a2f2f63646e2e6b6c65726f732e6c696e6b2f697066732f516d566246725a5231626379517a5a6a764c7958774c39656b44787271484552796b6472655278587277346e71672f616e696d6174696f6e735f66696c655f32332e6d7034292a2a2a293f222c0a2020202020202274797065223a202273696e676c652d73656c656374222c0a20202020202022616e7377657273223a205b0a20202020202020207b0a20202020202020202020227469746c65223a202252656675736520746f20417262697472617465206f7220496e76616c6964222c0a20202020202020202020226964223a202230783030222c0a20202020202020202020227265736572766564223a20747275650a20202020202020207d2c0a20202020202020207b0a20202020202020202020227469746c65223a2022596573222c0a20202020202020202020226465736372697074696f6e223a202254686520757365722062726f6b65207468652072756c65732e222c0a20202020202020202020226964223a202230783031222c0a20202020202020202020227265736572766564223a2066616c73650a20202020202020207d2c0a20202020202020207b0a20202020202020202020227469746c65223a20224e6f222c0a20202020202020202020226465736372697074696f6e223a20225468652075736572206469646e7420627265616b207468652072756c65732e222c0a20202020202020202020226964223a202230783032222c0a20202020202020202020227265736572766564223a2066616c73650a20202020202020207d2c0a20202020202020207b0a20202020202020202020226964223a2022307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646222c0a20202020202020202020227469746c65223a2022416e73776572656420546f6f20536f6f6e222c0a20202020202020202020227265736572766564223a20747275652c0a20202020202020202020226c617374223a20747275650a20202020202020207d0a2020202020205d2c0a202020202020227175657374696f6e4964223a2022307865326133626433386533616434653232333336616333356232323162626264643830386437313632303966383430313463376263336266363266386533623339222c0a202020202020227265616c69747941646472657373223a2022307831346136373438313932614243364531304341363934416530376244643433323744366337413531220a202020207d2c0a20202020227365656b223a205b0a202020202020227175657374696f6e222c0a2020202020202274797065222c0a20202020202022616e7377657273222c0a202020202020227175657374696f6e4964222c0a202020202020227265616c69747941646472657373220a202020205d2c0a2020202022706f70756c617465223a205b0a202020202020227175657374696f6e222c0a2020202020202274797065222c0a20202020202022616e7377657273222c0a202020202020227175657374696f6e4964222c0a202020202020227265616c69747941646472657373220a202020205d0a20207d0a5d00",
        "logIndex": 13,
        "blockHash": "0x89a77374b987a0d56d78be8f42506fe584f1830fbf1234451338f3db6b0832d2"
      }
    ],
    "blockNumber": 170589659,
    "cumulativeGasUsed": "4485093",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2836ae2ea2c013acd38028fd0c77b92cccfa2ee4",
    "0xE8442307d36e9bf6aB27F1A009F95CE8E11C3479",
    "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
    "0xe763d31Cb096B4bc7294012B78FC7F148324ebcb",
    "{\n    \"title\": \"A reality.eth question\",\n    \"description\": \"A reality.eth question has been raised to arbitration.\",\n    \"question\": \"{{ question }}\",\n    \"type\": \"{{ type }}\",\n    \"answers\": [\n      {{# answers }}\n      {\n        \"title\": \"{{ title }}\",\n        \"description\": \"{{ description }}\",\n        \"id\": \"{{ id }}\",\n        \"reserved\": {{ reserved }}\n      }{{^ last }},{{/ last }}\n      {{/ answers }}        \n    ],\n    \"policyURI\": \"/ipfs/QmZ5XaV2RVgBADq5qMpbuEwgCuPZdRgCeu8rhGtJWLV6yz\",\n    \"frontendUrl\": \"https://reality.eth.limo/app/#!/question/{{ realityAddress }}-{{ questionId }}\",\n    \"arbitratorChainID\": \"421614\",\n    \"arbitratorAddress\": \"0xE8442307d36e9bf6aB27F1A009F95CE8E11C3479\",\n    \"category\": \"Oracle\",\n    \"lang\": \"en_US\",\n    \"specification\": \"KIP99\",\n    \"version\": \"1.0\"\n}",
    "[\n  {\n    \"type\": \"json\",\n    \"value\": {\n      \"question\": \"**Kleros Moderate:** Did the user, **degenape6** (ID: 1554345080), break the Telegram group, ***[Kleros Trading Group]()*** (ID: -1001151472172), ***[rules](https://cdn.kleros.link/ipfs/Qme3Qbj9rKUNHUe9vj9rqCLnTVUCWKy2YfveQF8HiuWQSu/Kleros%20Moderate%20Community%20Rules.pdf)*** due to conduct related to the ***[message](https://t.me/c/1151472172/116662)*** (***[backup](https://cdn.kleros.link/ipfs/QmVbFrZR1bcyQzZjvLyXwL9ekDxrqHERykdreRxXrw4nqg/animations_file_23.mp4)***)?\",\n      \"type\": \"single-select\",\n      \"answers\": [\n        {\n          \"title\": \"Refuse to Arbitrate or Invalid\",\n          \"id\": \"0x00\",\n          \"reserved\": true\n        },\n        {\n          \"title\": \"Yes\",\n          \"description\": \"The user broke the rules.\",\n          \"id\": \"0x01\",\n          \"reserved\": false\n        },\n        {\n          \"title\": \"No\",\n          \"description\": \"The user didnt break the rules.\",\n          \"id\": \"0x02\",\n          \"reserved\": false\n        },\n        {\n          \"id\": \"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n          \"title\": \"Answered Too Soon\",\n          \"reserved\": true,\n          \"last\": true\n        }\n      ],\n      \"questionId\": \"0xe2a3bd38e3ad4e22336ac35b221bbbdd808d716209f84014c7bc3bf62f8e3b39\",\n      \"realityAddress\": \"0x14a6748192aBC6E10CA694Ae07bDd4327D6c7A51\"\n    },\n    \"seek\": [\n      \"question\",\n      \"type\",\n      \"answers\",\n      \"questionId\",\n      \"realityAddress\"\n    ],\n    \"populate\": [\n      \"question\",\n      \"type\",\n      \"answers\",\n      \"questionId\",\n      \"realityAddress\"\n    ]\n  }\n]",
    40161,
    "0x6EDCE65403992e310A62460808c4b910D972f10f"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fb4d79f53fec48585f0415760569758",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNative\",\"type\":\"address\"},{\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"contract IDisputeTemplateRegistry\",\"name\":\"_templateRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_templateData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_templateDataMappings\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"_homeEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientFundsForLayerZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"ArbitrationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"ArbitrationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"ArbitrationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPrevious\",\"type\":\"uint256\"}],\"name\":\"ArbitrationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_arbitratorDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_templateUri\",\"type\":\"string\"}],\"name\":\"DisputeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_ruling\",\"type\":\"bytes32\"}],\"name\":\"RulingRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUMBER_OF_CHOICES_FOR_ARBITRATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUSE_TO_ARBITRATE_REALITIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"_decodeArbitrationAcknowledgement\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"_decodeArbitrationCancelation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"_decodeMessage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbitrationCreatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbitrationIDToDisputeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbitrationIDToRequester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arbitrationRequests\",\"outputs\":[{\"internalType\":\"enum RealitioForeignProxyLZ.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint248\",\"name\":\"deposit\",\"type\":\"uint248\"},{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"answer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitratorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_templateData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_templateDataMappings\",\"type\":\"string\"}],\"name\":\"changeDisputeTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeIDToDisputeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arbitrationID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"}],\"name\":\"externalIDtoLocalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"handleFailedDisputeCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"handleFailedDisputeCreationCustomParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfRulingOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"questionIDToArbitrationID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"receiveArbitrationAcknowledgement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"receiveArbitrationCancelation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"relayRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"relayRuleCustomParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrevious\",\"type\":\"uint256\"}],\"name\":\"requestArbitration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrevious\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"requestArbitrationCustomParameters\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateRegistry\",\"outputs\":[{\"internalType\":\"contract IDisputeTemplateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract is meant to be deployed to the Ethereum chains where Kleros is deployed.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"ArbitrationCanceled(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question with the request for arbitration.\",\"_requester\":\"The address of the arbitration requester.\"}},\"ArbitrationCreated(bytes32,address,uint256)\":{\"params\":{\"_disputeID\":\"The ID of the dispute.\",\"_questionID\":\"The ID of the question with the request for arbitration.\",\"_requester\":\"The address of the arbitration requester.\"}},\"ArbitrationFailed(bytes32,address)\":{\"details\":\"This will happen if there is an increase in the arbitration fees between the time the arbitration is made and the time it is acknowledged.\",\"params\":{\"_questionID\":\"The ID of the question with the request for arbitration.\",\"_requester\":\"The address of the arbitration requester.\"}},\"ArbitrationRequested(bytes32,address,uint256)\":{\"params\":{\"_maxPrevious\":\"The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\",\"_questionID\":\"The ID of the question with the request for arbitration.\",\"_requester\":\"The address of the arbitration requester.\"}},\"DisputeRequest(address,uint256,uint256,uint256,string)\":{\"details\":\"To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\",\"params\":{\"_arbitrator\":\"The arbitrator of the contract.\",\"_arbitratorDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_externalDisputeID\":\"An identifier created outside Kleros by the protocol requesting arbitration.\",\"_templateId\":\"The identifier of the dispute template. Should not be used with _templateUri.\",\"_templateUri\":\"The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\"}},\"Ruling(address,uint256,uint256)\":{\"details\":\"To be raised when a ruling is given.\",\"params\":{\"_arbitrator\":\"The arbitrator giving the ruling.\",\"_disputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_ruling\":\"The ruling which was given.\"}},\"RulingRelayed(bytes32,bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question with the ruling to relay.\",\"_ruling\":\"Ruling converted into Realitio format.\"}}},\"kind\":\"dev\",\"methods\":{\"_decodeMessage(bytes)\":{\"details\":\"These are marked external to be called via try/catch for error handling.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"changeDisputeTemplate(string,string)\":{\"params\":{\"_templateData\":\"The new dispute template data.\",\"_templateDataMappings\":\"The new dispute template data mappings.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"constructor\":{\"params\":{\"_arbitrator\":\"Arbitrator contract address.\",\"_arbitratorExtraData\":\"The extra data used to raise a dispute in the arbitrator.\",\"_endpoint\":\"The LayerZero endpoint address.\",\"_homeEid\":\"The endpoint ID where the home proxy is deployed.\",\"_templateData\":\"The dispute template data.\",\"_templateDataMappings\":\"The dispute template data mappings.\",\"_templateRegistry\":\"The dispute template registry.\",\"_wNative\":\"The address of the wrapped version of the native currency.\"}},\"externalIDtoLocalID(uint256)\":{\"params\":{\"_externalDisputeID\":\"Dispute id as in arbitrator side.\"},\"returns\":{\"_0\":\"localDisputeID Dispute id as in arbitrable contract.\"}},\"getDisputeFee(bytes32)\":{\"returns\":{\"_0\":\"The fee to create a dispute.\"}},\"handleFailedDisputeCreation(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"handleFailedDisputeCreationCustomParameters(bytes32,address,bytes)\":{\"params\":{\"_options\":\"LayerZero message execution options.\",\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"numberOfRulingOptions(uint256)\":{\"returns\":{\"_0\":\"count The number of ruling options.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"questionIDToArbitrationID(bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question.\"},\"returns\":{\"_0\":\"The ID of the arbitration.\"}},\"receiveArbitrationAcknowledgement(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The requester.\"}},\"receiveArbitrationCancelation(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The requester.\"}},\"relayRule(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"relayRuleCustomParameters(bytes32,address,bytes)\":{\"params\":{\"_options\":\"LayerZero message execution options.\",\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requestArbitration(bytes32,uint256)\":{\"params\":{\"_maxPrevious\":\"The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\",\"_questionID\":\"The ID of the question.\"}},\"requestArbitrationCustomParameters(bytes32,uint256,bytes)\":{\"params\":{\"_maxPrevious\":\"The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\",\"_options\":\"LayerZero message execution options.\",\"_questionID\":\"The ID of the question.\"}},\"rule(uint256,uint256)\":{\"params\":{\"_disputeID\":\"The ID of the dispute in the arbitrator.\",\"_ruling\":\"The ruling given by the arbitrator.\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawETH(uint256)\":{\"params\":{\"_amount\":\"The amount of ETH to withdraw.\"}}},\"title\":\"Arbitration proxy for Realitio on the Arbitrator side (A.K.A. the Foreign Chain).\",\"version\":1},\"userdoc\":{\"events\":{\"ArbitrationCanceled(bytes32,address)\":{\"notice\":\"Should be emitted when the arbitration is canceled by the Home Chain.\"},\"ArbitrationCreated(bytes32,address,uint256)\":{\"notice\":\"Should be emitted when the dispute is created.\"},\"ArbitrationFailed(bytes32,address)\":{\"notice\":\"Should be emitted when the dispute could not be created.\"},\"ArbitrationRequested(bytes32,address,uint256)\":{\"notice\":\"Should be emitted when the arbitration is requested.\"},\"RulingRelayed(bytes32,bytes32)\":{\"notice\":\"Should be emitted when the ruling is relayed to home proxy manually. Some implementations may not emit this event.\"}},\"kind\":\"user\",\"methods\":{\"_decodeMessage(bytes)\":{\"notice\":\"External decoder functions for safe message parsing.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"changeDisputeTemplate(string,string)\":{\"notice\":\"Allows the owner to change the dispute template.\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"constructor\":{\"notice\":\"Creates an arbitration proxy on the foreign chain.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"externalIDtoLocalID(uint256)\":{\"notice\":\"Maps external (arbitrator side) dispute id to local (arbitrable) dispute id.\"},\"getDisputeFee(bytes32)\":{\"notice\":\"Gets the fee to create a dispute.\"},\"handleFailedDisputeCreation(bytes32,address)\":{\"notice\":\"Cancels the arbitration in case the dispute could not be created. This version of the function uses recommended bridging parameters.\"},\"handleFailedDisputeCreationCustomParameters(bytes32,address,bytes)\":{\"notice\":\"Cancels the arbitration in case the dispute could not be created. This function is to be used if the bridging with default parameters fail.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"numberOfRulingOptions(uint256)\":{\"notice\":\"Returns number of possible ruling options. Valid rulings are [0, return value].\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"questionIDToArbitrationID(bytes32)\":{\"notice\":\"Casts question ID into uint256 thus returning the related arbitration ID.\"},\"receiveArbitrationAcknowledgement(bytes32,address)\":{\"notice\":\"Receives the acknowledgement of the arbitration request for the given question and requester. TRUSTED.\"},\"receiveArbitrationCancelation(bytes32,address)\":{\"notice\":\"Receives the cancelation of the arbitration request for the given question and requester. TRUSTED.\"},\"relayRule(bytes32,address)\":{\"notice\":\"Relays the ruling to home proxy. This version of the function uses recommended bridging parameters.\"},\"relayRuleCustomParameters(bytes32,address,bytes)\":{\"notice\":\"Relays the ruling to home proxy. This function is to be used if the bridging with default parameters fail.\"},\"requestArbitration(bytes32,uint256)\":{\"notice\":\"Requests arbitration for the given question and contested answer. This version of the function uses recommended bridging parameters. Note that the signature of this function can't be changed as it's required by Reality UI.\"},\"requestArbitrationCustomParameters(bytes32,uint256,bytes)\":{\"notice\":\"Requests arbitration for the given question and contested answer. This function is to be used if the bridging with default parameters fail.\"},\"rule(uint256,uint256)\":{\"notice\":\"Rules a specified dispute. Can only be called by the arbitrator.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"withdrawETH(uint256)\":{\"notice\":\"Allows the owner to withdraw ETH from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RealitioForeignProxyLZ.sol\":\"RealitioForeignProxyLZ\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitrableV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IArbitrableV2\\n/// @notice Arbitrable interface.\\n/// @dev When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrableV2 {\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitratorDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The identifier of the dispute template. Should not be used with _templateUri.\\n    /// @param _templateUri The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\\n    event DisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 indexed _arbitratorDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId,\\n        string _templateUri\\n    );\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitratorV2 indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute.\\n    ///      Must be called by the arbitrator.\\n    ///      The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    /// Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0xe841a4fe8ec109ce17dde4457bf1583c8b499109b05887c53a49a3207fc6e80b\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IArbitrableV2.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitratorV2 {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrableV2 indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev To be emitted when an ERC20 token is added or removed as a method to pay fees.\\n    /// @param _token The ERC20 token.\\n    /// @param _accepted Whether the token is accepted or not.\\n    event AcceptedFeeToken(IERC20 indexed _token, bool indexed _accepted);\\n\\n    /// @dev To be emitted when the fee for a particular ERC20 token is updated.\\n    /// @param _feeToken The ERC20 token.\\n    /// @param _rateInEth The new rate of the fee token in ETH.\\n    /// @param _rateDecimals The new decimals of the fee token rate.\\n    event NewCurrencyRate(IERC20 indexed _feeToken, uint64 _rateInEth, uint8 _rateDecimals);\\n\\n    /// @dev Create a dispute and pay for the fees in the native currency, typically ETH.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData\\n    ) external payable returns (uint256 disputeID);\\n\\n    /// @dev Create a dispute and pay for the fees in a supported ERC20 token.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @param _feeAmount Amount of the ERC20 token used to pay fees.\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) external returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration denominated in the native currency, typically ETH.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return cost The arbitration cost in ETH.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /// @dev Compute the cost of arbitration denominated in `_feeToken`.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @return cost The arbitration cost in `_feeToken`.\\n    function arbitrationCost(bytes calldata _extraData, IERC20 _feeToken) external view returns (uint256 cost);\\n\\n    /// @dev Gets the current ruling of a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return ruling The current ruling.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return overridden Whether the ruling was overridden by appeal funding or not.\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling, bool tied, bool overridden);\\n}\\n\",\"keccak256\":\"0xa4dc6b958197adead238de4246cd04e7389c3dc1b9f968acd10985f8fc5b74cf\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n/// @title IDisputeTemplate\\n/// @notice Dispute Template interface.\\ninterface IDisputeTemplateRegistry {\\n    /// @dev To be emitted when a new dispute template is created.\\n    /// @param _templateId The identifier of the dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param _templateData The template data.\\n    /// @param _templateDataMappings The data mappings.\\n    event DisputeTemplate(\\n        uint256 indexed _templateId,\\n        string indexed _templateTag,\\n        string _templateData,\\n        string _templateDataMappings\\n    );\\n\\n    function setDisputeTemplate(\\n        string memory _templateTag,\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external returns (uint256 templateId);\\n}\\n\",\"keccak256\":\"0xb46ff71c32a524a865fe8ca99d94c9daeb690bc9d7d49d963a45b06f60af19f3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n// Constants for LayerZero Cross-Chain Arbitration System\\n// Defines message types and routing constants for Reality.eth arbitration across chains\\n\\n// Message Flow Overview:\\n// 1. ARBITRATION_REQUEST: Foreign \\u2192 Home (Request arbitration for a question)\\n// 2. ARBITRATION_ACKNOWLEDGEMENT: Home \\u2192 Foreign (Acknowledge request, start dispute)\\n// 3. ARBITRATION_CANCELATION: Home \\u2192 Foreign (Cancel rejected request)\\n// 4. ARBITRATION_FAILURE: Foreign \\u2192 Home (Notify failure to create dispute)\\n// 5. ARBITRATION_ANSWER: Foreign \\u2192 Home (Send final ruling from arbitrator)\\n\\n// Contract Routing:\\n// - RealitioHomeProxyLZ handles: REQUEST, FAILURE, ANSWER\\n// - RealitioForeignProxyLZ handles: ACKNOWLEDGEMENT, CANCELATION\\n\\nuint16 constant MSG_TYPE_ARBITRATION_REQUEST = 1;\\nuint16 constant MSG_TYPE_ARBITRATION_ACKNOWLEDGEMENT = 2;\\nuint16 constant MSG_TYPE_ARBITRATION_CANCELATION = 3;\\nuint16 constant MSG_TYPE_ARBITRATION_FAILURE = 4;\\nuint16 constant MSG_TYPE_ARBITRATION_ANSWER = 5;\\n\\n// Custom errors\\nerror InsufficientFundsForLayerZero(uint256 required, uint256 available);\",\"keccak256\":\"0x229f5d68f80919b83cdc75e5d8c07ca92a22673bdf13474f6937ba9957803c00\",\"license\":\"MIT\"},\"src/RealitioForeignProxyLZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport {IArbitrableV2, IArbitratorV2} from \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitratorV2.sol\\\";\\nimport {IDisputeTemplateRegistry} from \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\\\";\\nimport {OApp, Origin, MessagingFee} from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport {OAppOptionsType3} from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IForeignArbitrationProxy} from \\\"./interfaces/IArbitrationProxies.sol\\\";\\nimport {SafeSend} from \\\"./libraries/SafeSend.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Arbitration proxy for Realitio on the Arbitrator side (A.K.A. the Foreign Chain).\\n * @dev This contract is meant to be deployed to the Ethereum chains where Kleros is deployed.\\n */\\ncontract RealitioForeignProxyLZ is\\n    OApp,\\n    OAppOptionsType3,\\n    IForeignArbitrationProxy,\\n    IArbitrableV2\\n{\\n    using SafeSend for address payable;\\n\\n    /* Constants */\\n    uint256 public constant NUMBER_OF_CHOICES_FOR_ARBITRATOR =\\n        type(uint256).max; // The number of choices for the arbitrator.\\n    uint256 public constant REFUSE_TO_ARBITRATE_REALITIO = type(uint256).max; // Constant that represents \\\"Refuse to rule\\\" in realitio format.\\n\\n    /* Storage */\\n\\n    enum Status {\\n        None,\\n        Requested,\\n        Created,\\n        Ruled,\\n        Relayed,\\n        Failed\\n    }\\n\\n    struct ArbitrationRequest {\\n        Status status; // Status of the arbitration.\\n        uint248 deposit; // The deposit paid by the requester at the time of the arbitration.\\n        uint256 disputeID; // The ID of the dispute in arbitrator contract.\\n        uint256 answer; // The answer given by the arbitrator.\\n    }\\n\\n    struct DisputeDetails {\\n        uint256 arbitrationID; // The ID of the arbitration.\\n        address requester; // The address of the requester who managed to go through with the arbitration request.\\n    }\\n\\n    address public immutable wNative; // Address of wrapped version of the chain's native currency. WETH-like.\\n    IArbitratorV2 public immutable arbitrator; // The address of the arbitrator. TRUSTED.\\n    bytes public arbitratorExtraData; // The extra data used to raise a dispute in the arbitrator.\\n    IDisputeTemplateRegistry public immutable templateRegistry; // The dispute template registry. TRUSTED.\\n    uint32 public immutable homeEid; // The endpoint ID where the home proxy is deployed.\\n    mapping(uint256 => mapping(address => ArbitrationRequest))\\n        public arbitrationRequests; // Maps arbitration ID to its data. arbitrationRequests[uint(questionID)][requester].\\n    uint256 public templateId; // The dispute template identifier.\\n    mapping(uint256 => DisputeDetails) public disputeIDToDisputeDetails; // Maps external dispute ids to local arbitration ID and requester who was able to complete the arbitration request.\\n    mapping(uint256 => bool) public arbitrationIDToDisputeExists; // Whether a dispute has already been created for the given arbitration ID or not.\\n    mapping(uint256 => address) public arbitrationIDToRequester; // Maps arbitration ID to the requester who was able to complete the arbitration request.\\n    mapping(uint256 => uint256) public arbitrationCreatedBlock; // Block of dispute creation. arbitrationCreatedBlock[disputeID]\\n\\n    /**\\n     * @notice Creates an arbitration proxy on the foreign chain.\\n     * @param _wNative The address of the wrapped version of the native currency.\\n     * @param _arbitrator Arbitrator contract address.\\n     * @param _arbitratorExtraData The extra data used to raise a dispute in the arbitrator.\\n     * @param _templateRegistry The dispute template registry.\\n     * @param _templateData The dispute template data.\\n     * @param _templateDataMappings The dispute template data mappings.\\n     * @param _homeEid The endpoint ID where the home proxy is deployed.\\n     * @param _endpoint The LayerZero endpoint address.\\n     */\\n    constructor(\\n        address _wNative,\\n        IArbitratorV2 _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        IDisputeTemplateRegistry _templateRegistry,\\n        string memory _templateData,\\n        string memory _templateDataMappings,\\n        uint32 _homeEid,\\n        address _endpoint\\n    ) OApp(_endpoint, msg.sender) Ownable(msg.sender) {\\n        wNative = _wNative;\\n        arbitrator = _arbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n        templateRegistry = _templateRegistry;\\n        templateId = _templateRegistry.setDisputeTemplate(\\n            \\\"\\\",\\n            _templateData,\\n            _templateDataMappings\\n        );\\n        homeEid = _homeEid;\\n    }\\n\\n    /**\\n     * @notice Allows the contract to receive ETH deposits for LayerZero fees.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Allows the owner to withdraw ETH from the contract.\\n     * @param _amount The amount of ETH to withdraw.\\n     */\\n    function withdrawETH(uint256 _amount) external onlyOwner {\\n        require(_amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        payable(owner()).transfer(_amount);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to change the dispute template.\\n     * @param _templateData The new dispute template data.\\n     * @param _templateDataMappings The new dispute template data mappings.\\n     */\\n    function changeDisputeTemplate(\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external onlyOwner {\\n        templateId = templateRegistry.setDisputeTemplate(\\n            \\\"\\\",\\n            _templateData,\\n            _templateDataMappings\\n        );\\n    }\\n\\n    /* External and public */\\n\\n    /**\\n     * @notice LayerZero message receive function.\\n     * @dev Routes incoming messages to appropriate handler functions.\\n     */\\n    function _lzReceive(\\n        Origin calldata /*_origin*/,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override {\\n        // Decode message type first\\n        uint16 msgType;\\n        bytes memory payload;\\n\\n        try this._decodeMessage(_message) returns (\\n            uint16 _msgType,\\n            bytes memory _payload\\n        ) {\\n            msgType = _msgType;\\n            payload = _payload;\\n        } catch {\\n            revert(\\\"Invalid message format\\\");\\n        }\\n\\n        // Route message based on type\\n        if (msgType == MSG_TYPE_ARBITRATION_ACKNOWLEDGEMENT) {\\n            try this._decodeArbitrationAcknowledgement(payload) returns (\\n                bytes32 questionID,\\n                address requester\\n            ) {\\n                _handleArbitrationAcknowledgement(questionID, requester);\\n            } catch {\\n                revert(\\\"Invalid arbitration acknowledgement payload\\\");\\n            }\\n        } else if (msgType == MSG_TYPE_ARBITRATION_CANCELATION) {\\n            try this._decodeArbitrationCancelation(payload) returns (\\n                bytes32 questionID,\\n                address requester\\n            ) {\\n                _handleArbitrationCancelation(questionID, requester);\\n            } catch {\\n                revert(\\\"Invalid arbitration cancelation payload\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice External decoder functions for safe message parsing.\\n     * @dev These are marked external to be called via try/catch for error handling.\\n     */\\n    function _decodeMessage(\\n        bytes calldata _message\\n    ) external pure returns (uint16 msgType, bytes memory payload) {\\n        return abi.decode(_message, (uint16, bytes));\\n    }\\n\\n    function _decodeArbitrationAcknowledgement(\\n        bytes memory _payload\\n    ) external pure returns (bytes32 questionID, address requester) {\\n        return abi.decode(_payload, (bytes32, address));\\n    }\\n\\n    function _decodeArbitrationCancelation(\\n        bytes memory _payload\\n    ) external pure returns (bytes32 questionID, address requester) {\\n        return abi.decode(_payload, (bytes32, address));\\n    }\\n\\n    // ************************ //\\n    // *    Realitio logic    * //\\n    // ************************ //\\n\\n    /**\\n     * @notice Requests arbitration for the given question and contested answer.\\n     * This version of the function uses recommended bridging parameters.\\n     * Note that the signature of this function can't be changed as it's required by Reality UI.\\n     * @param _questionID The ID of the question.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    function requestArbitration(\\n        bytes32 _questionID,\\n        uint256 _maxPrevious\\n    ) external payable override {\\n        _requestArbitration(_questionID, _maxPrevious);\\n    }\\n\\n    /**\\n     * @notice Requests arbitration for the given question and contested answer.\\n     * This function is to be used if the bridging with default parameters fail.\\n     * @param _questionID The ID of the question.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     * @param _options LayerZero message execution options.\\n     */\\n    function requestArbitrationCustomParameters(\\n        bytes32 _questionID,\\n        uint256 _maxPrevious,\\n        bytes calldata _options\\n    ) external payable {\\n        _requestArbitration(_questionID, _maxPrevious, _options);\\n    }\\n\\n    /**\\n     * @notice Receives the acknowledgement of the arbitration request for the given question and requester. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The requester.\\n     */\\n    function receiveArbitrationAcknowledgement(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external override {\\n        _handleArbitrationAcknowledgement(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @dev Internal handler for arbitration acknowledgements.\\n     */\\n    function _handleArbitrationAcknowledgement(\\n        bytes32 _questionID,\\n        address _requester\\n    ) internal {\\n        require(_questionID != bytes32(0), \\\"Question ID cannot be empty\\\");\\n        require(_requester != address(0), \\\"Requester cannot be zero address\\\");\\n\\n        uint256 arbitrationID = uint256(_questionID);\\n        ArbitrationRequest storage arbitration = arbitrationRequests[\\n            arbitrationID\\n        ][_requester];\\n        require(\\n            arbitration.status == Status.Requested,\\n            \\\"Invalid arbitration status\\\"\\n        );\\n\\n        // Arbitration cost can possibly change between when the request has been made and received, so evaluate once more.\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(\\n            arbitratorExtraData\\n        );\\n\\n        if (arbitration.deposit >= arbitrationCost) {\\n            try\\n                arbitrator.createDispute{value: arbitrationCost}(\\n                    NUMBER_OF_CHOICES_FOR_ARBITRATOR,\\n                    arbitratorExtraData\\n                )\\n            returns (uint256 disputeID) {\\n                DisputeDetails\\n                    storage disputeDetails = disputeIDToDisputeDetails[\\n                        disputeID\\n                    ];\\n                disputeDetails.arbitrationID = arbitrationID;\\n                disputeDetails.requester = _requester;\\n\\n                arbitrationIDToDisputeExists[arbitrationID] = true;\\n                arbitrationIDToRequester[arbitrationID] = _requester;\\n                arbitrationCreatedBlock[disputeID] = block.number;\\n\\n                // At this point, arbitration.deposit is guaranteed to be greater than or equal to the arbitration cost.\\n                uint256 remainder = arbitration.deposit - arbitrationCost;\\n\\n                arbitration.status = Status.Created;\\n                arbitration.deposit = 0;\\n                arbitration.disputeID = disputeID;\\n\\n                if (remainder > 0) {\\n                    payable(_requester).safeSend(remainder, wNative);\\n                }\\n\\n                emit ArbitrationCreated(_questionID, _requester, disputeID);\\n                emit DisputeRequest(\\n                    arbitrator,\\n                    disputeID,\\n                    arbitrationID,\\n                    templateId,\\n                    \\\"\\\"\\n                );\\n            } catch {\\n                arbitration.status = Status.Failed;\\n                emit ArbitrationFailed(_questionID, _requester);\\n            }\\n        } else {\\n            arbitration.status = Status.Failed;\\n            emit ArbitrationFailed(_questionID, _requester);\\n        }\\n    }\\n\\n    /**\\n     * @notice Receives the cancelation of the arbitration request for the given question and requester. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The requester.\\n     */\\n    function receiveArbitrationCancelation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external override {\\n        _handleArbitrationCancelation(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @dev Internal handler for arbitration cancelations.\\n     */\\n    function _handleArbitrationCancelation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) internal {\\n        require(_questionID != bytes32(0), \\\"Question ID cannot be empty\\\");\\n        require(_requester != address(0), \\\"Requester cannot be zero address\\\");\\n\\n        uint256 arbitrationID = uint256(_questionID);\\n        ArbitrationRequest storage arbitration = arbitrationRequests[\\n            arbitrationID\\n        ][_requester];\\n        require(\\n            arbitration.status == Status.Requested,\\n            \\\"Invalid arbitration status\\\"\\n        );\\n        uint256 deposit = arbitration.deposit;\\n\\n        delete arbitrationRequests[arbitrationID][_requester];\\n        payable(_requester).safeSend(deposit, wNative);\\n\\n        emit ArbitrationCanceled(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @notice Cancels the arbitration in case the dispute could not be created.\\n     * This version of the function uses recommended bridging parameters.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleFailedDisputeCreation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external override {\\n        _handleFailedDisputeCreation(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @notice Cancels the arbitration in case the dispute could not be created.\\n     * This function is to be used if the bridging with default parameters fail.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _options LayerZero message execution options.\\n     */\\n    function handleFailedDisputeCreationCustomParameters(\\n        bytes32 _questionID,\\n        address _requester,\\n        bytes calldata _options\\n    ) external {\\n        _handleFailedDisputeCreation(_questionID, _requester, _options);\\n    }\\n\\n    /**\\n     * @notice Rules a specified dispute. Can only be called by the arbitrator.\\n     * @param _disputeID The ID of the dispute in the arbitrator.\\n     * @param _ruling The ruling given by the arbitrator.\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external override {\\n        DisputeDetails storage disputeDetails = disputeIDToDisputeDetails[\\n            _disputeID\\n        ];\\n        uint256 arbitrationID = disputeDetails.arbitrationID;\\n        address requester = disputeDetails.requester;\\n\\n        ArbitrationRequest storage arbitration = arbitrationRequests[\\n            arbitrationID\\n        ][requester];\\n        require(msg.sender == address(arbitrator), \\\"Only arbitrator allowed\\\");\\n        require(\\n            arbitration.status == Status.Created,\\n            \\\"Invalid arbitration status\\\"\\n        );\\n\\n        arbitration.answer = _ruling;\\n        arbitration.status = Status.Ruled;\\n\\n        emit Ruling(arbitrator, _disputeID, _ruling);\\n    }\\n\\n    /**\\n     * @notice Relays the ruling to home proxy.\\n     * This version of the function uses recommended bridging parameters.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function relayRule(bytes32 _questionID, address _requester) external {\\n        _relayRule(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @notice Relays the ruling to home proxy.\\n     * This function is to be used if the bridging with default parameters fail.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _options LayerZero message execution options.\\n     */\\n    function relayRuleCustomParameters(\\n        bytes32 _questionID,\\n        address _requester,\\n        bytes calldata _options\\n    ) external {\\n        _relayRule(_questionID, _requester, _options);\\n    }\\n\\n    /* External Views */\\n\\n    /**\\n     * @notice Returns number of possible ruling options. Valid rulings are [0, return value].\\n     * @return count The number of ruling options.\\n     */\\n    function numberOfRulingOptions(\\n        uint256 /* _arbitrationID */\\n    ) external pure returns (uint256) {\\n        return NUMBER_OF_CHOICES_FOR_ARBITRATOR;\\n    }\\n\\n    /**\\n     * @notice Gets the fee to create a dispute.\\n     * @return The fee to create a dispute.\\n     */\\n    function getDisputeFee(\\n        bytes32 /* _questionID */\\n    ) external view override returns (uint256) {\\n        return arbitrator.arbitrationCost(arbitratorExtraData);\\n    }\\n\\n    /**\\n     * @notice Casts question ID into uint256 thus returning the related arbitration ID.\\n     * @param _questionID The ID of the question.\\n     * @return The ID of the arbitration.\\n     */\\n    function questionIDToArbitrationID(\\n        bytes32 _questionID\\n    ) external pure returns (uint256) {\\n        return uint256(_questionID);\\n    }\\n\\n    /**\\n     * @notice Maps external (arbitrator side) dispute id to local (arbitrable) dispute id.\\n     * @param _externalDisputeID Dispute id as in arbitrator side.\\n     * @return localDisputeID Dispute id as in arbitrable contract.\\n     */\\n    function externalIDtoLocalID(\\n        uint256 _externalDisputeID\\n    ) external view returns (uint256) {\\n        return disputeIDToDisputeDetails[_externalDisputeID].arbitrationID;\\n    }\\n\\n    // **************************** //\\n    // *         Internal         * //\\n    // **************************** //\\n\\n    function _requestArbitration(\\n        bytes32 _questionID,\\n        uint256 _maxPrevious\\n    ) internal {\\n        bytes memory gasOptions = abi.encodePacked(uint16(1), uint128(300000)); // Set gas limit to 300,000 for arbitration request processing\\n        _requestArbitration(_questionID, _maxPrevious, gasOptions);\\n    }\\n\\n    function _requestArbitration(\\n        bytes32 _questionID,\\n        uint256 _maxPrevious,\\n        bytes memory _options\\n    ) internal {\\n        require(\\n            !arbitrationIDToDisputeExists[uint256(_questionID)],\\n            \\\"Dispute already created\\\"\\n        );\\n\\n        ArbitrationRequest storage arbitration = arbitrationRequests[\\n            uint256(_questionID)\\n        ][msg.sender];\\n        require(\\n            arbitration.status == Status.None,\\n            \\\"Arbitration already requested\\\"\\n        );\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(\\n            arbitratorExtraData\\n        );\\n\\n        // LayerZero fee calculation\\n        bytes memory message = abi.encode(\\n            MSG_TYPE_ARBITRATION_REQUEST,\\n            _questionID,\\n            msg.sender,\\n            _maxPrevious\\n        );\\n        bytes memory combinedOptions = this.combineOptions(\\n            homeEid,\\n            MSG_TYPE_ARBITRATION_REQUEST,\\n            _options\\n        );\\n        MessagingFee memory lzFee = _quote(\\n            homeEid,\\n            message,\\n            combinedOptions,\\n            false\\n        );\\n\\n        // Only require arbitration cost from msg.sender - LayerZero fee comes from contract balance\\n        require(msg.value >= arbitrationCost, \\\"Insufficient arbitration fee\\\");\\n        require(\\n            address(this).balance >= lzFee.nativeFee,\\n            \\\"Insufficient contract balance for LayerZero fee\\\"\\n        );\\n\\n        arbitration.status = Status.Requested;\\n        arbitration.deposit = uint248(msg.value); // Store full deposit for arbitration\\n\\n        _lzSend(\\n            homeEid,\\n            message,\\n            combinedOptions,\\n            MessagingFee(lzFee.nativeFee, 0),\\n            payable(address(this))\\n        );\\n\\n        emit ArbitrationRequested(_questionID, msg.sender, _maxPrevious);\\n    }\\n\\n    function _handleFailedDisputeCreation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) internal {\\n        bytes memory gasOptions = abi.encodePacked(uint16(1), uint128(200000)); // Set gas limit to 200,000 for arbitration failure processing\\n        _handleFailedDisputeCreation(_questionID, _requester, gasOptions);\\n    }\\n\\n    function _handleFailedDisputeCreation(\\n        bytes32 _questionID,\\n        address _requester,\\n        bytes memory _options\\n    ) internal {\\n        uint256 arbitrationID = uint256(_questionID);\\n        ArbitrationRequest storage arbitration = arbitrationRequests[\\n            arbitrationID\\n        ][_requester];\\n        require(\\n            arbitration.status == Status.Failed,\\n            \\\"Invalid arbitration status\\\"\\n        );\\n        uint256 deposit = arbitration.deposit;\\n\\n        // LayerZero fee calculation\\n        bytes memory message = abi.encode(\\n            MSG_TYPE_ARBITRATION_FAILURE,\\n            _questionID,\\n            _requester\\n        );\\n        bytes memory combinedOptions = this.combineOptions(\\n            homeEid,\\n            MSG_TYPE_ARBITRATION_FAILURE,\\n            _options\\n        );\\n        MessagingFee memory lzFee = _quote(\\n            homeEid,\\n            message,\\n            combinedOptions,\\n            false\\n        );\\n\\n        // Check contract balance for LayerZero fee\\n        if (address(this).balance < lzFee.nativeFee) {\\n            revert InsufficientFundsForLayerZero(\\n                lzFee.nativeFee,\\n                address(this).balance\\n            );\\n        }\\n\\n        // Note that we don't nullify the status to allow the function to be called\\n        // multiple times to avoid intentional blocking.\\n        // Also note that since the status is not nullified the requester must use a different address\\n        // to make a new request for the same question.\\n        arbitration.deposit = 0;\\n        payable(_requester).safeSend(deposit, wNative);\\n\\n        _lzSend(\\n            homeEid,\\n            message,\\n            combinedOptions,\\n            MessagingFee(lzFee.nativeFee, 0),\\n            payable(address(this))\\n        );\\n\\n        emit ArbitrationCanceled(_questionID, _requester);\\n    }\\n\\n    function _relayRule(bytes32 _questionID, address _requester) internal {\\n        bytes memory gasOptions = abi.encodePacked(uint16(1), uint128(250000)); // Set gas limit to 250,000 for arbitration answer processing\\n        _relayRule(_questionID, _requester, gasOptions);\\n    }\\n\\n    function _relayRule(\\n        bytes32 _questionID,\\n        address _requester,\\n        bytes memory _options\\n    ) internal {\\n        uint256 arbitrationID = uint256(_questionID);\\n        ArbitrationRequest storage arbitration = arbitrationRequests[\\n            arbitrationID\\n        ][_requester];\\n        // Note that we allow to relay multiple times to prevent intentional blocking.\\n        require(\\n            arbitration.status == Status.Ruled ||\\n                arbitration.status == Status.Relayed,\\n            \\\"Dispute not resolved\\\"\\n        );\\n\\n        arbitration.status = Status.Relayed;\\n\\n        // Realitio ruling is shifted by 1 compared to Kleros.\\n        uint256 realitioRuling = arbitration.answer != 0\\n            ? arbitration.answer - 1\\n            : REFUSE_TO_ARBITRATE_REALITIO;\\n\\n        bytes memory message = abi.encode(\\n            MSG_TYPE_ARBITRATION_ANSWER,\\n            _questionID,\\n            bytes32(realitioRuling)\\n        );\\n\\n        // LayerZero fee calculation\\n        bytes memory combinedOptions = this.combineOptions(\\n            homeEid,\\n            MSG_TYPE_ARBITRATION_ANSWER,\\n            _options\\n        );\\n        MessagingFee memory lzFee = _quote(\\n            homeEid,\\n            message,\\n            combinedOptions,\\n            false\\n        );\\n\\n        // Check contract balance for LayerZero fee\\n        if (address(this).balance < lzFee.nativeFee) {\\n            revert InsufficientFundsForLayerZero(\\n                lzFee.nativeFee,\\n                address(this).balance\\n            );\\n        }\\n\\n        _lzSend(\\n            homeEid,\\n            message,\\n            combinedOptions,\\n            MessagingFee(lzFee.nativeFee, 0),\\n            payable(address(this))\\n        );\\n\\n        emit RulingRelayed(_questionID, bytes32(realitioRuling));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7b78c8af30a1eec55d8ecc68db22015912e8d97f9d270e56a4b1d58aae7595\",\"license\":\"MIT\"},\"src/interfaces/IArbitrationProxies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IHomeArbitrationProxy {\\n    /**\\n     * @notice To be emitted when the Realitio contract has been notified of an arbitration request.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the previous bond for the question.\\n     */\\n    event RequestNotified(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 _maxPrevious\\n    );\\n\\n    /**\\n     * @notice To be emitted when arbitration request is rejected.\\n     * @dev This can happen if the current bond for the question is higher than maxPrevious\\n     * or if the question is already finalized.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the current bond for the question.\\n     * @param _reason The reason why the request was rejected.\\n     */\\n    event RequestRejected(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 _maxPrevious,\\n        string _reason\\n    );\\n\\n    /**\\n     * @notice To be emitted when the arbitration request acknowledgement is sent to the Foreign Chain.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event RequestAcknowledged(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice To be emitted when the arbitration request is canceled.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event RequestCanceled(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice To be emitted when the dispute could not be created on the Foreign Chain.\\n     * @dev This will happen if the arbitration fee increases in between the arbitration request and acknowledgement.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event ArbitrationFailed(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice To be emitted when receiving the answer from the arbitrator.\\n     * @param _questionID The ID of the question.\\n     * @param _answer The answer from the arbitrator.\\n     */\\n    event ArbitratorAnswered(bytes32 indexed _questionID, bytes32 _answer);\\n\\n    /**\\n     * @notice To be emitted when reporting the arbitrator answer to Realitio.\\n     * @param _questionID The ID of the question.\\n     */\\n    event ArbitrationFinished(bytes32 indexed _questionID);\\n\\n    /**\\n     * @dev Receives the requested arbitration for a question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    function receiveArbitrationRequest(\\n        bytes32 _questionID,\\n        address _requester,\\n        uint256 _maxPrevious\\n    ) external;\\n\\n    /**\\n     * @notice Handles arbitration request after it has been notified to Realitio for a given question.\\n     * @dev This method exists because `receiveArbitrationRequest` is called by\\n     * the bridge and cannot send messages back to it.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleNotifiedRequest(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Handles arbitration request after it has been rejected.\\n     * @dev This method exists because `receiveArbitrationRequest` is called by\\n     * the bridge and cannot send messages back to it.\\n     * Reasons why the request might be rejected:\\n     *  - The question does not exist\\n     *  - The question was not answered yet\\n     *  - The quesiton bond value changed while the arbitration was being requested\\n     *  - Another request was already accepted\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleRejectedRequest(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Receives a failed attempt to request arbitration. TRUSTED.\\n     * @dev Currently this can happen only if the arbitration cost increased.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function receiveArbitrationFailure(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Receives the answer to a specified question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _answer The answer from the arbitrator.\\n     */\\n    function receiveArbitrationAnswer(\\n        bytes32 _questionID,\\n        bytes32 _answer\\n    ) external;\\n\\n    /** @notice Provides a string of json-encoded metadata with the following properties:\\n         - tos: A URI representing the location of a terms-of-service document for the arbitrator.\\n         - template_hashes: An array of hashes of templates supported by the arbitrator. If you have a numerical ID for a template registered with Reality.eth, you can look up this hash by calling the Reality.eth template_hashes() function.\\n     *  @dev Template_hashes won't be used by this home proxy. \\n     */\\n    function metadata() external view returns (string calldata);\\n}\\n\\ninterface IForeignArbitrationProxy {\\n    /**\\n     * @notice Should be emitted when the arbitration is requested.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    event ArbitrationRequested(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 _maxPrevious\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the dispute is created.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _disputeID The ID of the dispute.\\n     */\\n    event ArbitrationCreated(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 indexed _disputeID\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the arbitration is canceled by the Home Chain.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event ArbitrationCanceled(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the dispute could not be created.\\n     * @dev This will happen if there is an increase in the arbitration fees\\n     * between the time the arbitration is made and the time it is acknowledged.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event ArbitrationFailed(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the ruling is relayed to home proxy manually. Some implementations may not emit this event.\\n     * @param _questionID The ID of the question with the ruling to relay.\\n     * @param _ruling Ruling converted into Realitio format.\\n     */\\n    event RulingRelayed(bytes32 _questionID, bytes32 _ruling);\\n\\n    /**\\n     * @notice Requests arbitration for the given question and contested answer.\\n     * @param _questionID The ID of the question.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    function requestArbitration(\\n        bytes32 _questionID,\\n        uint256 _maxPrevious\\n    ) external payable;\\n\\n    /**\\n     * @notice Receives the acknowledgement of the arbitration request for the given question and requester. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function receiveArbitrationAcknowledgement(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Receives the cancelation of the arbitration request for the given question and requester. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function receiveArbitrationCancelation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Cancels the arbitration in case the dispute could not be created.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleFailedDisputeCreation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Gets the fee to create a dispute.\\n     * @param _questionID the ID of the question.\\n     * @return The fee to create a dispute.\\n     */\\n    function getDisputeFee(bytes32 _questionID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x503105f2d1c14e59306faa78387cef13c175e261a9fc2985b2578ae3726162ff\",\"license\":\"MIT\"},\"src/libraries/SafeSend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface WethLike {\\n    function deposit() external payable;\\n\\n    function transfer(address dst, uint256 wad) external;\\n}\\n\\nlibrary SafeSend {\\n    function safeSend(\\n        address payable _to,\\n        uint256 _value,\\n        address _wethLike\\n    ) internal {\\n        if (_to.send(_value)) return;\\n\\n        WethLike(_wethLike).deposit{value: _value}();\\n        WethLike(_wethLike).transfer(_to, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x5822ea12c1e1f0810e28c95e255e8fe6a51355963f89070f9888e55b1b6a212e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200403238038062004032833981016040819052620000359162000308565b8033818180806200006057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006b81620001b9565b506001600160a01b0380831660805281166200009a57604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000e257600080fd5b505af1158015620000f7573d6000803e3d6000fd5b505050506001600160a01b038c811660a0528b1660c05250600392506200012391508890508262000489565b506001600160a01b03851660e08190526040516312a6505d60e21b8152634a9941749062000158908790879060040162000583565b6020604051808303816000875af115801562000178573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019e9190620005c3565b6005555063ffffffff166101005250620005dd945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200022157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002595781810151838201526020016200023f565b50506000910152565b600082601f8301126200027457600080fd5b81516001600160401b038082111562000291576200029162000226565b604051601f8301601f19908116603f01168101908282118183101715620002bc57620002bc62000226565b81604052838152866020858801011115620002d657600080fd5b620002e98460208301602089016200023c565b9695505050505050565b805163ffffffff811681146200022157600080fd5b600080600080600080600080610100898b0312156200032657600080fd5b620003318962000209565b97506200034160208a0162000209565b60408a01519097506001600160401b03808211156200035f57600080fd5b6200036d8c838d0162000262565b97506200037d60608c0162000209565b965060808b01519150808211156200039457600080fd5b620003a28c838d0162000262565b955060a08b0151915080821115620003b957600080fd5b50620003c88b828c0162000262565b935050620003d960c08a01620002f3565b9150620003e960e08a0162000209565b90509295985092959890939650565b600181811c908216806200040d57607f821691505b6020821081036200042e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000484576000816000526020600020601f850160051c810160208610156200045f5750805b601f850160051c820191505b8181101562000480578281556001016200046b565b5050505b505050565b81516001600160401b03811115620004a557620004a562000226565b620004bd81620004b68454620003f8565b8462000434565b602080601f831160018114620004f55760008415620004dc5750858301515b600019600386901b1c1916600185901b17855562000480565b600085815260208120601f198616915b82811015620005265788860151825594840194600190910190840162000505565b5085821015620005455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081518084526200056f8160208601602086016200023c565b601f01601f19169290920160200192915050565b6060815260006060820152608060208201526000620005a6608083018562000555565b8281036040840152620005ba818562000555565b95945050505050565b600060208284031215620005d657600080fd5b5051919050565b60805160a05160c05160e0516101005161395a620006d860003960008181610670015281816115d801528181611652015281816116eb01528181611a2101528181611a9c01528181611bad01528181611d8a01528181611e050152611e630152600081816106b9015261102c01526000818161052301528181610b6701528181610c2e01528181610dc0015281816119550152818161231b015281816123c2015261258c015260008181610373015281816116c2015281816121a4015261252d01526000818161047201528181610a0a015281816110d40152818161266d0152818161284d015281816129510152612a08015261395a6000f3fe6080604052600436106102815760003560e01c80638b7495261161014f578063bb163782116100c1578063ca5eb5e11161007a578063ca5eb5e114610870578063e742e2ed14610890578063edabc474146108b0578063f14210a61461091a578063f2fde38b1461093a578063ff7bd03d1461095a57600080fd5b8063bb16378214610788578063bc70b354146107a6578063bde80ca7146107c6578063be26fc8814610803578063c21ae06114610823578063c5d552881461085057600080fd5b8063a22352e211610113578063a22352e2146106db578063a829c3d1146106fb578063aba980eb1461070e578063b85cb85214610494578063b98bd0701461073b578063bb0b6a531461075b57600080fd5b80638b749526146105fe5780638d8b2d7e1461061e5780638da5cb5b14610640578063983dfb451461065e578063a0af81f0146106a757600080fd5b80635535d461116101f3578063715018a6116101ac578063715018a614610545578063756804c01461055a5780637a710491146102b85780637aa77f29146105905780637d25a05e146105a657806382413eac146105de57600080fd5b80635535d4611461042d5780635e1416d11461044d5780635e280f111461046057806360fedaae1461049457806368cb30f5146104d15780636cc6cde11461051157600080fd5b80632659070e116102455780632659070e146103415780632d68efc914610361578063311a6c56146103ad5780633400288b146103cd5780634aa6a1e4146103ed5780635082a7991461040d57600080fd5b80630c7ac7b61461028d5780630fa8c7ce146102b857806313137d65146102dc57806317442b70146102f157806324fd4c051461031357600080fd5b3661028857005b600080fd5b34801561029957600080fd5b506102a261097a565b6040516102af9190612b80565b60405180910390f35b3480156102c457600080fd5b506102ce60001981565b6040519081526020016102af565b6102ef6102ea366004612c08565b610a08565b005b3480156102fd57600080fd5b50604080516001815260026020820152016102af565b34801561031f57600080fd5b5061033361032e366004612ca7565b610ac8565b6040516102af929190612ce8565b34801561034d57600080fd5b506102ef61035c366004612d05565b610ae4565b34801561036d57600080fd5b506103957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102af565b3480156103b957600080fd5b506102ef6103c8366004612d60565b610b2b565b3480156103d957600080fd5b506102ef6103e8366004612d9b565b610c84565b3480156103f957600080fd5b506102ef610408366004612dc5565b610c9a565b34801561041957600080fd5b506102ef610428366004612dc5565b610ca4565b34801561043957600080fd5b506102a2610448366004612e05565b610cae565b6102ef61045b366004612e31565b610cd2565b34801561046c57600080fd5b506103957f000000000000000000000000000000000000000000000000000000000000000081565b3480156104a057600080fd5b506104b46104af366004612f56565b610d13565b604080519283526001600160a01b039091166020830152016102af565b3480156104dd57600080fd5b506105016104ec366004612f8a565b60076020526000908152604090205460ff1681565b60405190151581526020016102af565b34801561051d57600080fd5b506103957f000000000000000000000000000000000000000000000000000000000000000081565b34801561055157600080fd5b506102ef610d33565b34801561056657600080fd5b50610395610575366004612f8a565b6008602052600090815260409020546001600160a01b031681565b34801561059c57600080fd5b506102ce60055481565b3480156105b257600080fd5b506105c66105c1366004612d9b565b610d47565b6040516001600160401b0390911681526020016102af565b3480156105ea57600080fd5b506105016105f9366004612fa3565b610d50565b34801561060a57600080fd5b506102ef610619366004612d05565b610d65565b34801561062a57600080fd5b506102ce610639366004612f8a565b5060001990565b34801561064c57600080fd5b506000546001600160a01b0316610395565b34801561066a57600080fd5b506106927f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102af565b3480156106b357600080fd5b506103957f000000000000000000000000000000000000000000000000000000000000000081565b3480156106e757600080fd5b506102ce6106f6366004612f8a565b610da6565b6102ef610709366004612d60565b610e37565b34801561071a57600080fd5b506102ce610729366004612f8a565b60096020526000908152604090205481565b34801561074757600080fd5b506102ef610756366004613009565b610e41565b34801561076757600080fd5b506102ce61077636600461307d565b60016020526000908152604090205481565b34801561079457600080fd5b506102ce6107a3366004612f8a565b90565b3480156107b257600080fd5b506102a26107c1366004613098565b610e5b565b3480156107d257600080fd5b506104b46107e1366004612f8a565b600660205260009081526040902080546001909101546001600160a01b031682565b34801561080f57600080fd5b506102ef61081e366004612dc5565b611003565b34801561082f57600080fd5b506102ce61083e366004612f8a565b60009081526006602052604090205490565b34801561085c57600080fd5b506102ef61086b3660046130c7565b61100d565b34801561087c57600080fd5b506102ef61088b36600461312a565b6110ad565b34801561089c57600080fd5b506102ef6108ab366004612dc5565b611133565b3480156108bc57600080fd5b5061090a6108cb366004612dc5565b600460209081526000928352604080842090915290825290208054600182015460029092015460ff8216926101009092046001600160f81b0316919084565b6040516102af949392919061315d565b34801561092657600080fd5b506102ef610935366004612f8a565b61113d565b34801561094657600080fd5b506102ef61095536600461312a565b6111c5565b34801561096657600080fd5b506105016109753660046131a4565b611203565b60038054610987906131c0565b80601f01602080910402602001604051908101604052809291908181526020018280546109b3906131c0565b8015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610a58576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b60208701803590610a7290610a6d908a61307d565b611239565b14610ab057610a84602088018861307d565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610a4f565b610abf87878787878787611275565b50505050505050565b60006060610ad8838501856131f4565b915091505b9250929050565b610b25848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061151992505050565b50505050565b600082815260066020908152604080832080546001820154818652600485528386206001600160a01b03918216808852955292909420909392917f0000000000000000000000000000000000000000000000000000000000000000163314610bd55760405162461bcd60e51b815260206004820152601760248201527f4f6e6c792061726269747261746f7220616c6c6f7765640000000000000000006044820152606401610a4f565b6002815460ff166005811115610bed57610bed613147565b14610c0a5760405162461bcd60e51b8152600401610a4f90613239565b60028101859055805460ff1916600317815560405185815286906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a3505050505050565b610c8c61176e565b610c96828261179b565b5050565b610c9682826117f0565b610c96828261182a565b600260209081526000928352604080842090915290825290208054610987906131c0565b610b25848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061185f92505050565b60008082806020019051810190610d2a9190613270565b91509150915091565b610d3b61176e565b610d456000611c19565b565b60005b92915050565b6001600160a01b03811630145b949350505050565b610b25848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c6992505050565b60405163f7434ea960e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f7434ea990610df690600390600401613312565b602060405180830381865afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190613325565b610c968282611ee9565b610e4961176e565b610c96610e56828461333e565b611f1e565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610e8f906131c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebb906131c0565b8015610f085780601f10610edd57610100808354040283529160200191610f08565b820191906000526020600020905b815481529060010190602001808311610eeb57829003601f168201915b505050505090508051600003610f585783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610d5d9350505050565b6000839003610f68579050610d5d565b60028310610fe657610faf84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061203092505050565b80610fbd8460028188613415565b604051602001610fcf9392919061343f565b604051602081830303815290604052915050610d5d565b8383604051639a6d49cd60e01b8152600401610a4f929190613467565b610c96828261205c565b61101561176e565b6040516312a6505d60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634a994174906110639085908590600401613496565b6020604051808303816000875af1158015611082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a69190613325565b6005555050565b6110b561176e565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561111857600080fd5b505af115801561112c573d6000803e3d6000fd5b5050505050565b610c968282612205565b61114561176e565b4781111561118c5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610a4f565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610c96573d6000803e3d6000fd5b6111cd61176e565b6001600160a01b0381166111f757604051631e4fbdf760e01b815260006004820152602401610a4f565b61120081611c19565b50565b600060208201803590600190839061121b908661307d565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff811660009081526001602052604081205480610d4a5760405163f6ff4fb760e01b815263ffffffff84166004820152602401610a4f565b6040516324fd4c0560e01b815260009060609030906324fd4c05906112a0908a908a90600401613467565b600060405180830381865afa9250505080156112de57506040513d6000823e601f3d908101601f191682016040526112db919081019061350e565b60015b6113235760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b595cdcd859d948199bdc9b585d60521b6044820152606401610a4f565b909250905060011961ffff8316016114015760405163307f6d5760e11b815230906360fedaae90611358908490600401612b80565b6040805180830381865afa925050508015611390575060408051601f3d908101601f1916820190925261138d91810190613270565b60015b6113f05760405162461bcd60e51b815260206004820152602b60248201527f496e76616c6964206172626974726174696f6e2061636b6e6f776c656467656d60448201526a195b9d081c185e5b1bd85960aa1b6064820152608401610a4f565b6113fa8282612205565b505061150e565b60021961ffff8316016114cf57604051635c2e5c2960e11b8152309063b85cb85290611431908490600401612b80565b6040805180830381865afa925050508015611469575060408051601f3d908101601f1916820190925261146691810190613270565b60015b6114c55760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206172626974726174696f6e2063616e63656c6174696f6e206044820152661c185e5b1bd85960ca1b6064820152608401610a4f565b6113fa828261205c565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206d657373616765207479706560601b6044820152606401610a4f565b505050505050505050565b60008381526004602090815260408083206001600160a01b0386168452909152902083906005815460ff16600581111561155557611555613147565b146115725760405162461bcd60e51b8152600401610a4f90613239565b805460408051600460208201529081018790526001600160a01b03861660608201526101009091046001600160f81b03169060009060800160408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490611604907f0000000000000000000000000000000000000000000000000000000000000000906004908b908201613554565b600060405180830381865afa158015611621573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611649919081019061357d565b9050600061167a7f000000000000000000000000000000000000000000000000000000000000000084846000612657565b80519091504710156116ab5780516040516334b2107560e11b81526004810191909152476024820152604401610a4f565b845460ff1685556116e66001600160a01b038916857f0000000000000000000000000000000000000000000000000000000000000000612738565b61172c7f0000000000000000000000000000000000000000000000000000000000000000848460405180604001604052808660000151815260200160008152503061281a565b506040516001600160a01b038916908a907fe7700735be0b02f71ef1d623678daf36cd936af4c349a22ad9d5a8b217df0dd990600090a3505050505050505050565b6000546001600160a01b03163314610d455760405163118cdaa760e01b8152336004820152602401610a4f565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b6000600162030d406040516020016118099291906135b1565b6040516020818303038152906040529050611825838383611519565b505050565b600060016203d0906040516020016118439291906135b1565b6040516020818303038152906040529050611825838383611c69565b60008381526007602052604090205460ff16156118be5760405162461bcd60e51b815260206004820152601760248201527f4469737075746520616c726561647920637265617465640000000000000000006044820152606401610a4f565b6000838152600460209081526040808320338452909152812090815460ff1660058111156118ee576118ee613147565b1461193b5760405162461bcd60e51b815260206004820152601d60248201527f4172626974726174696f6e20616c7265616479207265717565737465640000006044820152606401610a4f565b60405163f7434ea960e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f7434ea99061198b90600390600401613312565b602060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613325565b60408051600160208201529081018790523360608201526080810186905290915060009060a00160408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490611a4e907f0000000000000000000000000000000000000000000000000000000000000000906001908a90600401613554565b600060405180830381865afa158015611a6b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a93919081019061357d565b90506000611ac47f000000000000000000000000000000000000000000000000000000000000000084846000612657565b905083341015611b165760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206172626974726174696f6e20666565000000006044820152606401610a4f565b8051471015611b7f5760405162461bcd60e51b815260206004820152602f60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636520666f60448201526e72204c617965725a65726f2066656560881b6064820152608401610a4f565b6001600160f81b033416610100026001178555604080518082019091528151815260006020820152611bd7907f000000000000000000000000000000000000000000000000000000000000000090859085903061281a565b50604051878152339089907f2067d1b3170fe803dd001b95b04f9d372eb9c3e5a48ed131a62962a7300bdb209060200160405180910390a35050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008381526004602090815260408083206001600160a01b0386168452909152902083906003815460ff166005811115611ca557611ca5613147565b1480611cc657506004815460ff166005811115611cc457611cc4613147565b145b611d095760405162461bcd60e51b8152602060048201526014602482015273111a5cdc1d5d19481b9bdd081c995cdbdb1d995960621b6044820152606401610a4f565b805460ff1916600417815560028101546000908103611d2a57600019611d3b565b60018260020154611d3b91906135e4565b60408051600560208201529081018890526060810182905290915060009060800160408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490611db7907f0000000000000000000000000000000000000000000000000000000000000000906005908b90600401613554565b600060405180830381865afa158015611dd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dfc919081019061357d565b90506000611e2d7f000000000000000000000000000000000000000000000000000000000000000084846000612657565b8051909150471015611e5e5780516040516334b2107560e11b81526004810191909152476024820152604401610a4f565b611ea47f0000000000000000000000000000000000000000000000000000000000000000848460405180604001604052808660000151815260200160008152503061281a565b50604080518a8152602081018690527fba07eb273dd4b62b682a13480e2838bfbd6afab07919d6bcad9156af107f8c41910160405180910390a1505050505050505050565b60006001620493e0604051602001611f029291906135b1565b604051602081830303815290604052905061182583838361185f565b60005b8151811015611ff557611f50828281518110611f3f57611f3f613605565b602002602001015160400151612030565b818181518110611f6257611f62613605565b60200260200101516040015160026000848481518110611f8457611f84613605565b60200260200101516000015163ffffffff1663ffffffff1681526020019081526020016000206000848481518110611fbe57611fbe613605565b60200260200101516020015161ffff1661ffff1681526020019081526020016000209081611fec919061366b565b50600101611f21565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b67481604051612025919061372a565b60405180910390a150565b600281015161ffff8116600314610c965781604051639a6d49cd60e01b8152600401610a4f9190612b80565b816120a95760405162461bcd60e51b815260206004820152601b60248201527f5175657374696f6e2049442063616e6e6f7420626520656d70747900000000006044820152606401610a4f565b6001600160a01b0381166120ff5760405162461bcd60e51b815260206004820181905260248201527f5265717565737465722063616e6e6f74206265207a65726f20616464726573736044820152606401610a4f565b60008281526004602090815260408083206001600160a01b0385168452909152902082906001815460ff16600581111561213b5761213b613147565b146121585760405162461bcd60e51b8152600401610a4f90613239565b805460008381526004602090815260408083206001600160a01b0388168085529252822082815560018101839055600201919091556101009091046001600160f81b0316906121c890827f0000000000000000000000000000000000000000000000000000000000000000612738565b6040516001600160a01b0385169086907fe7700735be0b02f71ef1d623678daf36cd936af4c349a22ad9d5a8b217df0dd990600090a35050505050565b816122525760405162461bcd60e51b815260206004820152601b60248201527f5175657374696f6e2049442063616e6e6f7420626520656d70747900000000006044820152606401610a4f565b6001600160a01b0381166122a85760405162461bcd60e51b815260206004820181905260248201527f5265717565737465722063616e6e6f74206265207a65726f20616464726573736044820152606401610a4f565b60008281526004602090815260408083206001600160a01b0385168452909152902082906001815460ff1660058111156122e4576122e4613147565b146123015760405162461bcd60e51b8152600401610a4f90613239565b60405163f7434ea960e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f7434ea99061235190600390600401613312565b602060405180830381865afa15801561236e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123929190613325565b825490915061010090046001600160f81b0316811161260f5760405163c13517e160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c13517e19083906123fe90600019906003906004016137b5565b60206040518083038185885af193505050508015612439575060408051601f3d908101601f1916820190925261243691810190613325565b60015b61248357815460ff191660051782556040516001600160a01b0385169086907f9beda0c81abc1c65da7685f113195974dfddb781dfde6263e5a1b13a5356ffad90600090a361112c565b6000818152600660209081526040808320878155600180820180546001600160a01b038c166001600160a01b031991821681179092558a875260078652848720805460ff191690931790925560088552838620805490921617905584845260099092528220439055845490919061250a9085906001600160f81b03610100909104166135e4565b600286556001860184905590508015612551576125516001600160a01b038816827f0000000000000000000000000000000000000000000000000000000000000000612738565b82876001600160a01b0316897fcf9bcbc2efae51060af73ef64119281007f63eada739f19c41c181d8350fa81460405160405180910390a4827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f8bd32f430ff060e6bd204709b3790c9807987263d3230c580dc80b5f89e27186886005546040516125ff929190918252602082015260606040820181905260009082015260800190565b60405180910390a350505061112c565b815460ff191660051782556040516001600160a01b0385169086907f9beda0c81abc1c65da7685f113195974dfddb781dfde6263e5a1b13a5356ffad90600090a35050505050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff1681526020016126ba89611239565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016126ef9291906137ce565b6040805180830381865afa15801561270b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272f9190613895565b95945050505050565b6040516001600160a01b0384169083156108fc029084906000818181858888f193505050501561276757505050565b806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156127a257600080fd5b505af11580156127b6573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018790528516935063a9059cbb92506044019050600060405180830381600087803b15801561280657600080fd5b505af1158015610abf573d6000803e3d6000fd5b612822612ae9565b60006128318460000151612925565b60208501519091501561284b5761284b846020015161294d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200161289b8c611239565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016128d79291906137ce565b60806040518083038185885af11580156128f5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061291a91906138b1565b979650505050505050565b6000813414612949576040516304fb820960e51b8152346004820152602401610a4f565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d19190613907565b90506001600160a01b0381166129fa576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660448501526064808501889052855180860390910181526084909401909452602080840180516001600160e01b03166323b872dd60e01b1781528451610c96968816958993610b2593889360009283929091839182885af180612a9b576040513d6000823e3d81fd5b50506000513d91508115612ab3578060011415612ac0565b6001600160a01b0384163b155b15610b2557604051635274afe760e01b81526001600160a01b0385166004820152602401610a4f565b60405180606001604052806000801916815260200160006001600160401b03168152602001612b2b604051806040016040528060008152602001600081525090565b905290565b60005b83811015612b4b578181015183820152602001612b33565b50506000910152565b60008151808452612b6c816020860160208601612b30565b601f01601f19169290920160200192915050565b602081526000612b936020830184612b54565b9392505050565b600060608284031215612bac57600080fd5b50919050565b60008083601f840112612bc457600080fd5b5081356001600160401b03811115612bdb57600080fd5b602083019150836020828501011115610add57600080fd5b6001600160a01b038116811461120057600080fd5b600080600080600080600060e0888a031215612c2357600080fd5b612c2d8989612b9a565b96506060880135955060808801356001600160401b0380821115612c5057600080fd5b612c5c8b838c01612bb2565b909750955060a08a01359150612c7182612bf3565b90935060c08901359080821115612c8757600080fd5b50612c948a828b01612bb2565b989b979a50959850939692959293505050565b60008060208385031215612cba57600080fd5b82356001600160401b03811115612cd057600080fd5b612cdc85828601612bb2565b90969095509350505050565b61ffff83168152604060208201526000610d5d6040830184612b54565b60008060008060608587031215612d1b57600080fd5b843593506020850135612d2d81612bf3565b925060408501356001600160401b03811115612d4857600080fd5b612d5487828801612bb2565b95989497509550505050565b60008060408385031215612d7357600080fd5b50508035926020909101359150565b803563ffffffff81168114612d9657600080fd5b919050565b60008060408385031215612dae57600080fd5b612db783612d82565b946020939093013593505050565b60008060408385031215612dd857600080fd5b823591506020830135612dea81612bf3565b809150509250929050565b61ffff8116811461120057600080fd5b60008060408385031215612e1857600080fd5b612e2183612d82565b91506020830135612dea81612df5565b60008060008060608587031215612e4757600080fd5b843593506020850135925060408501356001600160401b03811115612d4857600080fd5b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715612ea357612ea3612e6b565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612ed157612ed1612e6b565b604052919050565b60006001600160401b03821115612ef257612ef2612e6b565b50601f01601f191660200190565b600082601f830112612f1157600080fd5b8135612f24612f1f82612ed9565b612ea9565b818152846020838601011115612f3957600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612f6857600080fd5b81356001600160401b03811115612f7e57600080fd5b610d5d84828501612f00565b600060208284031215612f9c57600080fd5b5035919050565b60008060008060a08587031215612fb957600080fd5b612fc38686612b9a565b935060608501356001600160401b03811115612fde57600080fd5b612fea87828801612bb2565b9094509250506080850135612ffe81612bf3565b939692955090935050565b6000806020838503121561301c57600080fd5b82356001600160401b038082111561303357600080fd5b818501915085601f83011261304757600080fd5b81358181111561305657600080fd5b8660208260051b850101111561306b57600080fd5b60209290920196919550909350505050565b60006020828403121561308f57600080fd5b612b9382612d82565b600080600080606085870312156130ae57600080fd5b6130b785612d82565b93506020850135612d2d81612df5565b600080604083850312156130da57600080fd5b82356001600160401b03808211156130f157600080fd5b6130fd86838701612f00565b9350602085013591508082111561311357600080fd5b5061312085828601612f00565b9150509250929050565b60006020828403121561313c57600080fd5b8135612b9381612bf3565b634e487b7160e01b600052602160045260246000fd5b608081016006861061317f57634e487b7160e01b600052602160045260246000fd5b9481526001600160f81b03939093166020840152604083019190915260609091015290565b6000606082840312156131b657600080fd5b612b938383612b9a565b600181811c908216806131d457607f821691505b602082108103612bac57634e487b7160e01b600052602260045260246000fd5b6000806040838503121561320757600080fd5b823561321281612df5565b915060208301356001600160401b0381111561322d57600080fd5b61312085828601612f00565b6020808252601a908201527f496e76616c6964206172626974726174696f6e20737461747573000000000000604082015260600190565b6000806040838503121561328357600080fd5b825191506020830151612dea81612bf3565b600081546132a2816131c0565b8085526020600183811680156132bf57600181146132d957613307565b60ff1985168884015283151560051b880183019550613307565b866000528260002060005b858110156132ff5781548a82018601529083019084016132e4565b890184019650505b505050505092915050565b602081526000612b936020830184613295565b60006020828403121561333757600080fd5b5051919050565b60006001600160401b038084111561335857613358612e6b565b8360051b6020613369818301612ea9565b86815291850191818101903684111561338157600080fd5b865b848110156134095780358681111561339b5760008081fd5b880160603682900312156133af5760008081fd5b6133b7612e81565b6133c082612d82565b8152858201356133cf81612df5565b81870152604082810135898111156133e75760008081fd5b6133f336828601612f00565b9183019190915250845250918301918301613383565b50979650505050505050565b6000808585111561342557600080fd5b8386111561343257600080fd5b5050820193919092039150565b60008451613451818460208901612b30565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60608152600060608201526080602082015260006134b76080830185612b54565b828103604084015261272f8185612b54565b600082601f8301126134da57600080fd5b81516134e8612f1f82612ed9565b8181528460208386010111156134fd57600080fd5b610d5d826020830160208701612b30565b6000806040838503121561352157600080fd5b825161352c81612df5565b60208401519092506001600160401b0381111561354857600080fd5b613120858286016134c9565b63ffffffff8416815261ffff8316602082015260606040820152600061272f6060830184612b54565b60006020828403121561358f57600080fd5b81516001600160401b038111156135a557600080fd5b610d5d848285016134c9565b60f09290921b6001600160f01b031916825260801b6fffffffffffffffffffffffffffffffff1916600282015260120190565b81810381811115610d4a57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b601f821115611825576000816000526020600020601f850160051c810160208610156136445750805b601f850160051c820191505b8181101561366357828155600101613650565b505050505050565b81516001600160401b0381111561368457613684612e6b565b6136988161369284546131c0565b8461361b565b602080601f8311600181146136cd57600084156136b55750858301515b600019600386901b1c1916600185901b178555613663565b600085815260208120601f198616915b828110156136fc578886015182559484019460019091019084016136dd565b508582101561371a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b838110156137a757888303603f190185528151805163ffffffff1684528781015161ffff1688850152860151606087850181905261379381860183612b54565b968901969450505090860190600101613753565b509098975050505050505050565b828152604060208201526000610d5d6040830184613295565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a0608084015261380460e0840182612b54565b90506060850151603f198483030160a08501526138218282612b54565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b60006040828403121561385957600080fd5b604051604081018181106001600160401b038211171561387b5761387b612e6b565b604052825181526020928301519281019290925250919050565b6000604082840312156138a757600080fd5b612b938383613847565b6000608082840312156138c357600080fd5b6138cb612e81565b8251815260208301516001600160401b03811681146138e957600080fd5b60208201526138fb8460408501613847565b60408201529392505050565b60006020828403121561391957600080fd5b8151612b9381612bf356fea2646970667358221220b6efb9b6c015c5d06269bc861395ac4bc544c03065eadd4616016ab08a03580264736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract is meant to be deployed to the Ethereum chains where Kleros is deployed.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "ArbitrationCanceled(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question with the request for arbitration.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "ArbitrationCreated(bytes32,address,uint256)": {
        "params": {
          "_disputeID": "The ID of the dispute.",
          "_questionID": "The ID of the question with the request for arbitration.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "ArbitrationFailed(bytes32,address)": {
        "details": "This will happen if there is an increase in the arbitration fees between the time the arbitration is made and the time it is acknowledged.",
        "params": {
          "_questionID": "The ID of the question with the request for arbitration.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "ArbitrationRequested(bytes32,address,uint256)": {
        "params": {
          "_maxPrevious": "The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.",
          "_questionID": "The ID of the question with the request for arbitration.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "DisputeRequest(address,uint256,uint256,uint256,string)": {
        "details": "To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.",
        "params": {
          "_arbitrator": "The arbitrator of the contract.",
          "_arbitratorDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_externalDisputeID": "An identifier created outside Kleros by the protocol requesting arbitration.",
          "_templateId": "The identifier of the dispute template. Should not be used with _templateUri.",
          "_templateUri": "The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId."
        }
      },
      "Ruling(address,uint256,uint256)": {
        "details": "To be raised when a ruling is given.",
        "params": {
          "_arbitrator": "The arbitrator giving the ruling.",
          "_disputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_ruling": "The ruling which was given."
        }
      },
      "RulingRelayed(bytes32,bytes32)": {
        "params": {
          "_questionID": "The ID of the question with the ruling to relay.",
          "_ruling": "Ruling converted into Realitio format."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "_decodeMessage(bytes)": {
        "details": "These are marked external to be called via try/catch for error handling."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "changeDisputeTemplate(string,string)": {
        "params": {
          "_templateData": "The new dispute template data.",
          "_templateDataMappings": "The new dispute template data mappings."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "constructor": {
        "params": {
          "_arbitrator": "Arbitrator contract address.",
          "_arbitratorExtraData": "The extra data used to raise a dispute in the arbitrator.",
          "_endpoint": "The LayerZero endpoint address.",
          "_homeEid": "The endpoint ID where the home proxy is deployed.",
          "_templateData": "The dispute template data.",
          "_templateDataMappings": "The dispute template data mappings.",
          "_templateRegistry": "The dispute template registry.",
          "_wNative": "The address of the wrapped version of the native currency."
        }
      },
      "externalIDtoLocalID(uint256)": {
        "params": {
          "_externalDisputeID": "Dispute id as in arbitrator side."
        },
        "returns": {
          "_0": "localDisputeID Dispute id as in arbitrable contract."
        }
      },
      "getDisputeFee(bytes32)": {
        "returns": {
          "_0": "The fee to create a dispute."
        }
      },
      "handleFailedDisputeCreation(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "handleFailedDisputeCreationCustomParameters(bytes32,address,bytes)": {
        "params": {
          "_options": "LayerZero message execution options.",
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "numberOfRulingOptions(uint256)": {
        "returns": {
          "_0": "count The number of ruling options."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "questionIDToArbitrationID(bytes32)": {
        "params": {
          "_questionID": "The ID of the question."
        },
        "returns": {
          "_0": "The ID of the arbitration."
        }
      },
      "receiveArbitrationAcknowledgement(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The requester."
        }
      },
      "receiveArbitrationCancelation(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The requester."
        }
      },
      "relayRule(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "relayRuleCustomParameters(bytes32,address,bytes)": {
        "params": {
          "_options": "LayerZero message execution options.",
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requestArbitration(bytes32,uint256)": {
        "params": {
          "_maxPrevious": "The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.",
          "_questionID": "The ID of the question."
        }
      },
      "requestArbitrationCustomParameters(bytes32,uint256,bytes)": {
        "params": {
          "_maxPrevious": "The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.",
          "_options": "LayerZero message execution options.",
          "_questionID": "The ID of the question."
        }
      },
      "rule(uint256,uint256)": {
        "params": {
          "_disputeID": "The ID of the dispute in the arbitrator.",
          "_ruling": "The ruling given by the arbitrator."
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH(uint256)": {
        "params": {
          "_amount": "The amount of ETH to withdraw."
        }
      }
    },
    "title": "Arbitration proxy for Realitio on the Arbitrator side (A.K.A. the Foreign Chain).",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ArbitrationCanceled(bytes32,address)": {
        "notice": "Should be emitted when the arbitration is canceled by the Home Chain."
      },
      "ArbitrationCreated(bytes32,address,uint256)": {
        "notice": "Should be emitted when the dispute is created."
      },
      "ArbitrationFailed(bytes32,address)": {
        "notice": "Should be emitted when the dispute could not be created."
      },
      "ArbitrationRequested(bytes32,address,uint256)": {
        "notice": "Should be emitted when the arbitration is requested."
      },
      "RulingRelayed(bytes32,bytes32)": {
        "notice": "Should be emitted when the ruling is relayed to home proxy manually. Some implementations may not emit this event."
      }
    },
    "kind": "user",
    "methods": {
      "_decodeMessage(bytes)": {
        "notice": "External decoder functions for safe message parsing."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "changeDisputeTemplate(string,string)": {
        "notice": "Allows the owner to change the dispute template."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "constructor": {
        "notice": "Creates an arbitration proxy on the foreign chain."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "externalIDtoLocalID(uint256)": {
        "notice": "Maps external (arbitrator side) dispute id to local (arbitrable) dispute id."
      },
      "getDisputeFee(bytes32)": {
        "notice": "Gets the fee to create a dispute."
      },
      "handleFailedDisputeCreation(bytes32,address)": {
        "notice": "Cancels the arbitration in case the dispute could not be created. This version of the function uses recommended bridging parameters."
      },
      "handleFailedDisputeCreationCustomParameters(bytes32,address,bytes)": {
        "notice": "Cancels the arbitration in case the dispute could not be created. This function is to be used if the bridging with default parameters fail."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "numberOfRulingOptions(uint256)": {
        "notice": "Returns number of possible ruling options. Valid rulings are [0, return value]."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "questionIDToArbitrationID(bytes32)": {
        "notice": "Casts question ID into uint256 thus returning the related arbitration ID."
      },
      "receiveArbitrationAcknowledgement(bytes32,address)": {
        "notice": "Receives the acknowledgement of the arbitration request for the given question and requester. TRUSTED."
      },
      "receiveArbitrationCancelation(bytes32,address)": {
        "notice": "Receives the cancelation of the arbitration request for the given question and requester. TRUSTED."
      },
      "relayRule(bytes32,address)": {
        "notice": "Relays the ruling to home proxy. This version of the function uses recommended bridging parameters."
      },
      "relayRuleCustomParameters(bytes32,address,bytes)": {
        "notice": "Relays the ruling to home proxy. This function is to be used if the bridging with default parameters fail."
      },
      "requestArbitration(bytes32,uint256)": {
        "notice": "Requests arbitration for the given question and contested answer. This version of the function uses recommended bridging parameters. Note that the signature of this function can't be changed as it's required by Reality UI."
      },
      "requestArbitrationCustomParameters(bytes32,uint256,bytes)": {
        "notice": "Requests arbitration for the given question and contested answer. This function is to be used if the bridging with default parameters fail."
      },
      "rule(uint256,uint256)": {
        "notice": "Rules a specified dispute. Can only be called by the arbitrator."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "withdrawETH(uint256)": {
        "notice": "Allows the owner to withdraw ETH from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1694,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 946,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1542,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 2605,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "arbitratorExtraData",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2617,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "arbitrationRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ArbitrationRequest)2593_storage))"
      },
      {
        "astId": 2619,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "templateId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2624,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "disputeIDToDisputeDetails",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(DisputeDetails)2598_storage)"
      },
      {
        "astId": 2628,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "arbitrationIDToDisputeExists",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2632,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "arbitrationIDToRequester",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2636,
        "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
        "label": "arbitrationCreatedBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)2583": {
        "encoding": "inplace",
        "label": "enum RealitioForeignProxyLZ.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ArbitrationRequest)2593_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RealitioForeignProxyLZ.ArbitrationRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ArbitrationRequest)2593_storage"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(ArbitrationRequest)2593_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct RealitioForeignProxyLZ.ArbitrationRequest))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ArbitrationRequest)2593_storage)"
      },
      "t_mapping(t_uint256,t_struct(DisputeDetails)2598_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RealitioForeignProxyLZ.DisputeDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(DisputeDetails)2598_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_struct(ArbitrationRequest)2593_storage": {
        "encoding": "inplace",
        "label": "struct RealitioForeignProxyLZ.ArbitrationRequest",
        "members": [
          {
            "astId": 2586,
            "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)2583"
          },
          {
            "astId": 2588,
            "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
            "label": "deposit",
            "offset": 1,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 2590,
            "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
            "label": "disputeID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2592,
            "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
            "label": "answer",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DisputeDetails)2598_storage": {
        "encoding": "inplace",
        "label": "struct RealitioForeignProxyLZ.DisputeDetails",
        "members": [
          {
            "astId": 2595,
            "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
            "label": "arbitrationID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2597,
            "contract": "src/RealitioForeignProxyLZ.sol:RealitioForeignProxyLZ",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}