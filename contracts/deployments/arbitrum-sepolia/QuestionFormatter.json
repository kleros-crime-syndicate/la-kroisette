{
  "address": "0x1c22c32c12695361A7b8a4Ee3751A7f246014b7c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "questionText",
          "type": "string"
        }
      ],
      "name": "formatQuestionText",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d15d97e995b0ed6289b135c6d1d0990e3849b21955172834b9e2a15e2ebd848",
  "receipt": {
    "to": null,
    "from": "0x853CD77ea63dbb57423821f6ca2E014368F2058a",
    "contractAddress": "0x1c22c32c12695361A7b8a4Ee3751A7f246014b7c",
    "transactionIndex": 5,
    "gasUsed": "493616",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x39874180c35e18111e57c3f2046390c96a61b2369ff0f3545b5ecb22beb7a504",
    "transactionHash": "0x5d15d97e995b0ed6289b135c6d1d0990e3849b21955172834b9e2a15e2ebd848",
    "logs": [],
    "blockNumber": 170596726,
    "cumulativeGasUsed": "890054",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8c66e3dd107b62d46320551078457a77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionText\",\"type\":\"string\"}],\"name\":\"formatQuestionText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"formatQuestionText(string,string)\":{\"details\":\"Formats a question text template by replacing %s placeholders with values from data string\",\"params\":{\"data\":\"String containing values separated by \\u241f character\",\"questionText\":\"Template string containing %s placeholders to be replaced\"},\"returns\":{\"_0\":\"Formatted string with all %s replaced by corresponding values from data\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/QuestionFormatter.sol\":\"QuestionFormatter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/QuestionFormatter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ncontract QuestionFormatter {\\n    /**\\n     * @dev Formats a question text template by replacing %s placeholders with values from data string\\n     * @param data String containing values separated by \\u241f character\\n     * @param questionText Template string containing %s placeholders to be replaced\\n     * @return Formatted string with all %s replaced by corresponding values from data\\n     */\\n    function formatQuestionText(string memory data, string memory questionText) \\n        external \\n        pure \\n        returns (string memory) \\n    {\\n        // Split data by separator \\u241f\\n        string[] memory values = _splitString(data, \\\"\\\\u241F\\\"); // \\u241f is Unicode U+241F\\n        \\n        // Replace each %s in questionText with corresponding value\\n        string memory result = questionText;\\n        for (uint256 i = 0; i < values.length; i++) {\\n            result = _replaceFirst(result, \\\"%s\\\", values[i]);\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * @dev Splits a string by a separator character\\n     * @param str String to split\\n     * @param separator Separator character\\n     * @return Array of split strings\\n     */\\n    function _splitString(string memory str, string memory separator) \\n        private \\n        pure \\n        returns (string[] memory) \\n    {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory sepBytes = bytes(separator);\\n        \\n        // Count separators to determine array size\\n        uint256 count = 1;\\n        for (uint256 i = 0; i <= strBytes.length - sepBytes.length; i++) {\\n            if (_matchesAt(strBytes, sepBytes, i)) {\\n                count++;\\n            }\\n        }\\n        \\n        string[] memory result = new string[](count);\\n        uint256 resultIndex = 0;\\n        uint256 start = 0;\\n        \\n        for (uint256 i = 0; i <= strBytes.length - sepBytes.length; i++) {\\n            if (_matchesAt(strBytes, sepBytes, i)) {\\n                result[resultIndex] = _substring(str, start, i);\\n                resultIndex++;\\n                start = i + sepBytes.length;\\n            }\\n        }\\n        \\n        // Add the last part\\n        if (start < strBytes.length) {\\n            result[resultIndex] = _substring(str, start, strBytes.length);\\n        } else if (start == strBytes.length && count > 1) {\\n            result[resultIndex] = \\\"\\\";\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * @dev Replaces the first occurrence of a substring in a string\\n     * @param str Original string\\n     * @param search Substring to search for\\n     * @param replacement Replacement string\\n     * @return Modified string\\n     */\\n    function _replaceFirst(string memory str, string memory search, string memory replacement) \\n        private \\n        pure \\n        returns (string memory) \\n    {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory searchBytes = bytes(search);\\n        bytes memory replacementBytes = bytes(replacement);\\n        \\n        // Find first occurrence\\n        for (uint256 i = 0; i <= strBytes.length - searchBytes.length; i++) {\\n            if (_matchesAt(strBytes, searchBytes, i)) {\\n                // Build result: before + replacement + after\\n                bytes memory result = new bytes(strBytes.length - searchBytes.length + replacementBytes.length);\\n                \\n                // Copy before\\n                for (uint256 j = 0; j < i; j++) {\\n                    result[j] = strBytes[j];\\n                }\\n                \\n                // Copy replacement\\n                for (uint256 j = 0; j < replacementBytes.length; j++) {\\n                    result[i + j] = replacementBytes[j];\\n                }\\n                \\n                // Copy after\\n                for (uint256 j = i + searchBytes.length; j < strBytes.length; j++) {\\n                    result[i + replacementBytes.length + j - i - searchBytes.length] = strBytes[j];\\n                }\\n                \\n                return string(result);\\n            }\\n        }\\n        \\n        return str; // No match found\\n    }\\n    \\n    /**\\n     * @dev Checks if pattern matches at a specific position in the string\\n     * @param str String to check\\n     * @param pattern Pattern to match\\n     * @param pos Position to check\\n     * @return True if pattern matches at position\\n     */\\n    function _matchesAt(bytes memory str, bytes memory pattern, uint256 pos) \\n        private \\n        pure \\n        returns (bool) \\n    {\\n        if (pos + pattern.length > str.length) {\\n            return false;\\n        }\\n        \\n        for (uint256 i = 0; i < pattern.length; i++) {\\n            if (str[pos + i] != pattern[i]) {\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Extracts a substring from a string\\n     * @param str Original string\\n     * @param start Start index\\n     * @param end End index (exclusive)\\n     * @return Substring\\n     */\\n    function _substring(string memory str, uint256 start, uint256 end) \\n        private \\n        pure \\n        returns (string memory) \\n    {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(end - start);\\n        \\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = strBytes[i];\\n        }\\n        \\n        return string(result);\\n    }\\n} \",\"keccak256\":\"0xc626db5067516b248e16e2424579a3bd18e1533ec179871edd02d230dd506716\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107f3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630565410914610030575b600080fd5b61004361003e36600461069f565b610059565b6040516100509190610703565b60405180910390f35b606060006100828460405180604001604052806003815260200162e2909f60e81b8152506100e4565b90508260005b82518110156100d9576100cf8260405180604001604052806002815260200161257360f01b8152508584815181106100c2576100c2610752565b602002602001015161028d565b9150600101610088565b509150505b92915050565b60608282600160005b825184516100fb919061077e565b81116101315761010c8484836104a1565b1561011f578161011b81610791565b9250505b8061012981610791565b9150506100ed565b5060008167ffffffffffffffff81111561014d5761014d6105fc565b60405190808252806020026020018201604052801561018057816020015b606081526020019060019003908161016b5790505b50905060008060005b85518751610197919061077e565b8111610205576101a88787836104a1565b156101f3576101b88a8383610539565b8484815181106101ca576101ca610752565b602002602001018190525082806101e090610791565b9350508551816101f091906107aa565b91505b806101fd81610791565b915050610189565b50855181101561023d5761021b89828851610539565b83838151811061022d5761022d610752565b6020026020010181905250610280565b85518114801561024d5750600184115b15610280576040518060200160405280600081525083838151811061027457610274610752565b60200260200101819052505b5090979650505050505050565b606083838360005b825184516102a3919061077e565b8111610492576102b48484836104a1565b156104805760008251845186516102cb919061077e565b6102d591906107aa565b67ffffffffffffffff8111156102ed576102ed6105fc565b6040519080825280601f01601f191660200182016040528015610317576020820181803683370190505b50905060005b828110156103735785818151811061033757610337610752565b602001015160f81c60f81b82828151811061035457610354610752565b60200101906001600160f81b031916908160001a90535060010161031d565b5060005b83518110156103db5783818151811061039257610392610752565b01602001516001600160f81b031916826103ac83866107aa565b815181106103bc576103bc610752565b60200101906001600160f81b031916908160001a905350600101610377565b5060008451836103eb91906107aa565b90505b85518110156104735785818151811061040957610409610752565b602001015160f81c60f81b828651858488518861042691906107aa565b61043091906107aa565b61043a919061077e565b610444919061077e565b8151811061045457610454610752565b60200101906001600160f81b031916908160001a9053506001016103ee565b50945061049a9350505050565b8061048a81610791565b915050610295565b508693505050505b9392505050565b600083518351836104b291906107aa565b11156104c05750600061049a565b60005b835181101561052e578381815181106104de576104de610752565b01602001516001600160f81b031916856104f883866107aa565b8151811061050857610508610752565b01602001516001600160f81b0319161461052657600091505061049a565b6001016104c3565b506001949350505050565b6060836000610548858561077e565b67ffffffffffffffff811115610560576105606105fc565b6040519080825280601f01601f19166020018201604052801561058a576020820181803683370190505b509050845b848110156105f2578281815181106105a9576105a9610752565b01602001516001600160f81b031916826105c3888461077e565b815181106105d3576105d3610752565b60200101906001600160f81b031916908160001a90535060010161058f565b5095945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261062357600080fd5b813567ffffffffffffffff8082111561063e5761063e6105fc565b604051601f8301601f19908116603f01168101908282118183101715610666576106666105fc565b8160405283815286602085880101111561067f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156106b257600080fd5b823567ffffffffffffffff808211156106ca57600080fd5b6106d686838701610612565b935060208501359150808211156106ec57600080fd5b506106f985828601610612565b9150509250929050565b60006020808352835180602085015260005b8181101561073157858101830151858201604001528201610715565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156100de576100de610768565b6000600182016107a3576107a3610768565b5060010190565b808201808211156100de576100de61076856fea2646970667358221220d8f82fdc31fe257be8b17d6af43e84b988f4e2c6f4a9ab4bdf4c0212083bdc3d64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630565410914610030575b600080fd5b61004361003e36600461069f565b610059565b6040516100509190610703565b60405180910390f35b606060006100828460405180604001604052806003815260200162e2909f60e81b8152506100e4565b90508260005b82518110156100d9576100cf8260405180604001604052806002815260200161257360f01b8152508584815181106100c2576100c2610752565b602002602001015161028d565b9150600101610088565b509150505b92915050565b60608282600160005b825184516100fb919061077e565b81116101315761010c8484836104a1565b1561011f578161011b81610791565b9250505b8061012981610791565b9150506100ed565b5060008167ffffffffffffffff81111561014d5761014d6105fc565b60405190808252806020026020018201604052801561018057816020015b606081526020019060019003908161016b5790505b50905060008060005b85518751610197919061077e565b8111610205576101a88787836104a1565b156101f3576101b88a8383610539565b8484815181106101ca576101ca610752565b602002602001018190525082806101e090610791565b9350508551816101f091906107aa565b91505b806101fd81610791565b915050610189565b50855181101561023d5761021b89828851610539565b83838151811061022d5761022d610752565b6020026020010181905250610280565b85518114801561024d5750600184115b15610280576040518060200160405280600081525083838151811061027457610274610752565b60200260200101819052505b5090979650505050505050565b606083838360005b825184516102a3919061077e565b8111610492576102b48484836104a1565b156104805760008251845186516102cb919061077e565b6102d591906107aa565b67ffffffffffffffff8111156102ed576102ed6105fc565b6040519080825280601f01601f191660200182016040528015610317576020820181803683370190505b50905060005b828110156103735785818151811061033757610337610752565b602001015160f81c60f81b82828151811061035457610354610752565b60200101906001600160f81b031916908160001a90535060010161031d565b5060005b83518110156103db5783818151811061039257610392610752565b01602001516001600160f81b031916826103ac83866107aa565b815181106103bc576103bc610752565b60200101906001600160f81b031916908160001a905350600101610377565b5060008451836103eb91906107aa565b90505b85518110156104735785818151811061040957610409610752565b602001015160f81c60f81b828651858488518861042691906107aa565b61043091906107aa565b61043a919061077e565b610444919061077e565b8151811061045457610454610752565b60200101906001600160f81b031916908160001a9053506001016103ee565b50945061049a9350505050565b8061048a81610791565b915050610295565b508693505050505b9392505050565b600083518351836104b291906107aa565b11156104c05750600061049a565b60005b835181101561052e578381815181106104de576104de610752565b01602001516001600160f81b031916856104f883866107aa565b8151811061050857610508610752565b01602001516001600160f81b0319161461052657600091505061049a565b6001016104c3565b506001949350505050565b6060836000610548858561077e565b67ffffffffffffffff811115610560576105606105fc565b6040519080825280601f01601f19166020018201604052801561058a576020820181803683370190505b509050845b848110156105f2578281815181106105a9576105a9610752565b01602001516001600160f81b031916826105c3888461077e565b815181106105d3576105d3610752565b60200101906001600160f81b031916908160001a90535060010161058f565b5095945050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261062357600080fd5b813567ffffffffffffffff8082111561063e5761063e6105fc565b604051601f8301601f19908116603f01168101908282118183101715610666576106666105fc565b8160405283815286602085880101111561067f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156106b257600080fd5b823567ffffffffffffffff808211156106ca57600080fd5b6106d686838701610612565b935060208501359150808211156106ec57600080fd5b506106f985828601610612565b9150509250929050565b60006020808352835180602085015260005b8181101561073157858101830151858201604001528201610715565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156100de576100de610768565b6000600182016107a3576107a3610768565b5060010190565b808201808211156100de576100de61076856fea2646970667358221220d8f82fdc31fe257be8b17d6af43e84b988f4e2c6f4a9ab4bdf4c0212083bdc3d64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "formatQuestionText(string,string)": {
        "details": "Formats a question text template by replacing %s placeholders with values from data string",
        "params": {
          "data": "String containing values separated by ␟ character",
          "questionText": "Template string containing %s placeholders to be replaced"
        },
        "returns": {
          "_0": "Formatted string with all %s replaced by corresponding values from data"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}