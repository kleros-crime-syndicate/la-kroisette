{
  "address": "0x92F1548e69d43E44F06aCaFdd6A5a951a1c1e055",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRealitio",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "_foreignEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFundsForLayerZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "ArbitrationFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        }
      ],
      "name": "ArbitrationFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_answer",
          "type": "bytes32"
        }
      ],
      "name": "ArbitratorAnswered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "RequestAcknowledged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "RequestCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxPrevious",
          "type": "uint256"
        }
      ],
      "name": "RequestNotified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maxPrevious",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        }
      ],
      "name": "RequestRejected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "_decodeArbitrationAnswer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "answer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "_decodeArbitrationFailure",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "_decodeArbitrationRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxPrevious",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "_decodeMessage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foreignEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "handleNotifiedRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "handleRejectedRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "questionIDToRequester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealitio",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_answer",
          "type": "bytes32"
        }
      ],
      "name": "receiveArbitrationAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "receiveArbitrationFailure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrevious",
          "type": "uint256"
        }
      ],
      "name": "receiveArbitrationRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_lastHistoryHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_lastAnswerOrCommitmentID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_lastAnswerer",
          "type": "address"
        }
      ],
      "name": "reportArbitrationAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "enum RealitioHomeProxyLZ.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "arbitratorAnswer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x91c751cc8e99058bbc19adf12a4b0ff7cb10ffe4931bece0e0a071575e7b7428",
  "receipt": {
    "to": null,
    "from": "0x853CD77ea63dbb57423821f6ca2E014368F2058a",
    "contractAddress": "0x92F1548e69d43E44F06aCaFdd6A5a951a1c1e055",
    "transactionIndex": 113,
    "gasUsed": "2757280",
    "logsBloom": "0x
    "blockHash": "0x256314deacaf3196a4c41a335350c13479f0076f92cdc189e4d319e828714e5c",
    "transactionHash": "0x91c751cc8e99058bbc19adf12a4b0ff7cb10ffe4931bece0e0a071575e7b7428",
    "logs": [
      {
        "transactionIndex": 113,
        "blockNumber": 8700168,
        "transactionHash": "0x91c751cc8e99058bbc19adf12a4b0ff7cb10ffe4931bece0e0a071575e7b7428",
        "address": "0x92F1548e69d43E44F06aCaFdd6A5a951a1c1e055",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000853cd77ea63dbb57423821f6ca2e014368f2058a"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x256314deacaf3196a4c41a335350c13479f0076f92cdc189e4d319e828714e5c"
      },
      {
        "transactionIndex": 113,
        "blockNumber": 8700168,
        "transactionHash": "0x91c751cc8e99058bbc19adf12a4b0ff7cb10ffe4931bece0e0a071575e7b7428",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x00000000000000000000000092f1548e69d43e44f06acafdd6a5a951a1c1e055000000000000000000000000853cd77ea63dbb57423821f6ca2e014368f2058a",
        "logIndex": 136,
        "blockHash": "0x256314deacaf3196a4c41a335350c13479f0076f92cdc189e4d319e828714e5c"
      }
    ],
    "blockNumber": 8700168,
    "cumulativeGasUsed": "9945456",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf33DcB6E8c5c4D9dDF579f53031b514d19449CA",
    "",
    40231,
    "0x6EDCE65403992e310A62460808c4b910D972f10f"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fb4d79f53fec48585f0415760569758",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRealitio\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"_foreignEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientFundsForLayerZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"ArbitrationFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"}],\"name\":\"ArbitrationFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_answer\",\"type\":\"bytes32\"}],\"name\":\"ArbitratorAnswered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"RequestAcknowledged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"RequestCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPrevious\",\"type\":\"uint256\"}],\"name\":\"RequestNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxPrevious\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"RequestRejected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"_decodeArbitrationAnswer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"_decodeArbitrationFailure\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"_decodeArbitrationRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrevious\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"_decodeMessage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foreignEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"handleNotifiedRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"handleRejectedRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questionIDToRequester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealitio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_answer\",\"type\":\"bytes32\"}],\"name\":\"receiveArbitrationAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"receiveArbitrationFailure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrevious\",\"type\":\"uint256\"}],\"name\":\"receiveArbitrationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lastHistoryHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_lastAnswerOrCommitmentID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_lastAnswerer\",\"type\":\"address\"}],\"name\":\"reportArbitrationAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"enum RealitioHomeProxyLZ.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"arbitratorAnswer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract is meant to be deployed to side-chains in which Reality.eth is deployed.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"ArbitrationFailed(bytes32,address)\":{\"details\":\"This will happen if the arbitration fee increases in between the arbitration request and acknowledgement.\",\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"ArbitrationFinished(bytes32)\":{\"params\":{\"_questionID\":\"The ID of the question.\"}},\"ArbitratorAnswered(bytes32,bytes32)\":{\"params\":{\"_answer\":\"The answer from the arbitrator.\",\"_questionID\":\"The ID of the question.\"}},\"RequestAcknowledged(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"RequestCanceled(bytes32,address)\":{\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"RequestNotified(bytes32,address,uint256)\":{\"params\":{\"_maxPrevious\":\"The maximum value of the previous bond for the question.\",\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the arbitration requester.\"}},\"RequestRejected(bytes32,address,uint256,string)\":{\"details\":\"This can happen if the current bond for the question is higher than maxPrevious or if the question is already finalized.\",\"params\":{\"_maxPrevious\":\"The maximum value of the current bond for the question.\",\"_questionID\":\"The ID of the question.\",\"_reason\":\"The reason why the request was rejected.\",\"_requester\":\"The address of the arbitration requester.\"}}},\"kind\":\"dev\",\"methods\":{\"_decodeMessage(bytes)\":{\"details\":\"These are marked external to be called via try/catch for error handling.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"constructor\":{\"params\":{\"_endpoint\":\"The LayerZero endpoint address.\",\"_foreignEid\":\"The endpoint ID where the foreign proxy is deployed.\",\"_metadata\":\"Metadata for Realitio.\",\"_realitio\":\"Realitio contract address.\"}},\"handleNotifiedRequest(bytes32,address)\":{\"details\":\"This method exists because `receiveArbitrationRequest` is called by the AMB and cannot send messages back to it.\",\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the user that requested arbitration.\"}},\"handleRejectedRequest(bytes32,address)\":{\"details\":\"This method exists because `receiveArbitrationRequest` is called by the AMB and cannot send messages back to it. Reasons why the request might be rejected:  - The question does not exist  - The question was not answered yet  - The question bond value changed while the arbitration was being requested  - Another request was already accepted\",\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the user that requested arbitration.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveArbitrationAnswer(bytes32,bytes32)\":{\"params\":{\"_answer\":\"The answer from the arbitrator.\",\"_questionID\":\"The ID of the question.\"}},\"receiveArbitrationFailure(bytes32,address)\":{\"details\":\"Currently this can happen only if the arbitration cost increased.\",\"params\":{\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the user that requested arbitration.\"}},\"receiveArbitrationRequest(bytes32,address,uint256)\":{\"details\":\"Receives the requested arbitration for a question. TRUSTED.\",\"params\":{\"_maxPrevious\":\"The maximum value of the previous bond for the question.\",\"_questionID\":\"The ID of the question.\",\"_requester\":\"The address of the user that requested arbitration.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"reportArbitrationAnswer(bytes32,bytes32,bytes32,address)\":{\"details\":\"The Realitio contract validates the input parameters passed to this method, so making this publicly accessible is safe.\",\"params\":{\"_lastAnswerOrCommitmentID\":\"The last answer given, or its commitment ID if it was a commitment, to the question in the Realitio contract.\",\"_lastAnswerer\":\"The last answerer to the question in the Realitio contract.\",\"_lastHistoryHash\":\"The history hash given with the last answer to the question in the Realitio contract.\",\"_questionID\":\"The ID of the question.\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawETH(uint256)\":{\"params\":{\"_amount\":\"The amount of ETH to withdraw.\"}}},\"stateVariables\":{\"foreignEid\":{\"details\":\"The endpoint ID where the foreign proxy is deployed.\"},\"metadata\":{\"details\":\"Metadata for Realitio interface.\"},\"questionIDToRequester\":{\"details\":\"Associates a question ID with the requester who succeeded in requesting arbitration. questionIDToRequester[questionID]\"},\"realitio\":{\"details\":\"The address of the Realitio contract (v2.1+ required). TRUSTED.\"},\"requests\":{\"details\":\"Associates an arbitration request with a question ID and a requester address. requests[questionID][requester]\"}},\"title\":\"Arbitration proxy for Realitio on the Oracle side (A.K.A. the Home Chain).\",\"version\":1},\"userdoc\":{\"events\":{\"ArbitrationFailed(bytes32,address)\":{\"notice\":\"To be emitted when the dispute could not be created on the Foreign Chain.\"},\"ArbitrationFinished(bytes32)\":{\"notice\":\"To be emitted when reporting the arbitrator answer to Realitio.\"},\"ArbitratorAnswered(bytes32,bytes32)\":{\"notice\":\"To be emitted when receiving the answer from the arbitrator.\"},\"RequestAcknowledged(bytes32,address)\":{\"notice\":\"To be emitted when the arbitration request acknowledgement is sent to the Foreign Chain.\"},\"RequestCanceled(bytes32,address)\":{\"notice\":\"To be emitted when the arbitration request is canceled.\"},\"RequestNotified(bytes32,address,uint256)\":{\"notice\":\"To be emitted when the Realitio contract has been notified of an arbitration request.\"},\"RequestRejected(bytes32,address,uint256,string)\":{\"notice\":\"To be emitted when arbitration request is rejected.\"}},\"kind\":\"user\",\"methods\":{\"_decodeMessage(bytes)\":{\"notice\":\"External decoder functions for safe message parsing.\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"constructor\":{\"notice\":\"Creates an arbitration proxy on the home chain.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"handleNotifiedRequest(bytes32,address)\":{\"notice\":\"Handles arbitration request after it has been notified to Realitio for a given question.\"},\"handleRejectedRequest(bytes32,address)\":{\"notice\":\"Handles arbitration request after it has been rejected.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"receiveArbitrationAnswer(bytes32,bytes32)\":{\"notice\":\"Receives an answer to a specified question. TRUSTED.\"},\"receiveArbitrationFailure(bytes32,address)\":{\"notice\":\"Receives a failed attempt to request arbitration. TRUSTED.\"},\"reportArbitrationAnswer(bytes32,bytes32,bytes32,address)\":{\"notice\":\"Reports the answer provided by the arbitrator to a specified question.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"withdrawETH(uint256)\":{\"notice\":\"Allows the owner to withdraw ETH from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RealitioHomeProxyLZ.sol\":\"RealitioHomeProxyLZ\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n// Constants for LayerZero Cross-Chain Arbitration System\\n// Defines message types and routing constants for Reality.eth arbitration across chains\\n\\n// Message Flow Overview:\\n// 1. ARBITRATION_REQUEST: Foreign \\u2192 Home (Request arbitration for a question)\\n// 2. ARBITRATION_ACKNOWLEDGEMENT: Home \\u2192 Foreign (Acknowledge request, start dispute)\\n// 3. ARBITRATION_CANCELATION: Home \\u2192 Foreign (Cancel rejected request)\\n// 4. ARBITRATION_FAILURE: Foreign \\u2192 Home (Notify failure to create dispute)\\n// 5. ARBITRATION_ANSWER: Foreign \\u2192 Home (Send final ruling from arbitrator)\\n\\n// Contract Routing:\\n// - RealitioHomeProxyLZ handles: REQUEST, FAILURE, ANSWER\\n// - RealitioForeignProxyLZ handles: ACKNOWLEDGEMENT, CANCELATION\\n\\nuint16 constant MSG_TYPE_ARBITRATION_REQUEST = 1;\\nuint16 constant MSG_TYPE_ARBITRATION_ACKNOWLEDGEMENT = 2;\\nuint16 constant MSG_TYPE_ARBITRATION_CANCELATION = 3;\\nuint16 constant MSG_TYPE_ARBITRATION_FAILURE = 4;\\nuint16 constant MSG_TYPE_ARBITRATION_ANSWER = 5;\\n\\n// Custom errors\\nerror InsufficientFundsForLayerZero(uint256 required, uint256 available);\",\"keccak256\":\"0x229f5d68f80919b83cdc75e5d8c07ca92a22673bdf13474f6937ba9957803c00\",\"license\":\"MIT\"},\"src/RealitioHomeProxyLZ.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport {OApp, Origin, MessagingFee} from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport {OAppOptionsType3} from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IRealitio} from \\\"./interfaces/IRealitio.sol\\\";\\nimport {IHomeArbitrationProxy} from \\\"./interfaces/IArbitrationProxies.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Arbitration proxy for Realitio on the Oracle side (A.K.A. the Home Chain).\\n * @dev This contract is meant to be deployed to side-chains in which Reality.eth is deployed.\\n */\\ncontract RealitioHomeProxyLZ is OApp, OAppOptionsType3, IHomeArbitrationProxy {\\n    /// @dev The address of the Realitio contract (v2.1+ required). TRUSTED.\\n    IRealitio public immutable realitio;\\n\\n    /// @dev The endpoint ID where the foreign proxy is deployed.\\n    uint32 public immutable foreignEid;\\n\\n    /// @dev Metadata for Realitio interface.\\n    string public override metadata;\\n\\n    enum Status {\\n        None,\\n        Rejected,\\n        Notified,\\n        AwaitingRuling,\\n        Ruled,\\n        Finished\\n    }\\n\\n    struct Request {\\n        Status status;\\n        bytes32 arbitratorAnswer;\\n    }\\n\\n    /// @dev Associates an arbitration request with a question ID and a requester address. requests[questionID][requester]\\n    mapping(bytes32 => mapping(address => Request)) public requests;\\n\\n    /// @dev Associates a question ID with the requester who succeeded in requesting arbitration. questionIDToRequester[questionID]\\n    mapping(bytes32 => address) public questionIDToRequester;\\n\\n    /**\\n     * @notice Creates an arbitration proxy on the home chain.\\n     * @param _realitio Realitio contract address.\\n     * @param _metadata Metadata for Realitio.\\n     * @param _foreignEid The endpoint ID where the foreign proxy is deployed.\\n     * @param _endpoint The LayerZero endpoint address.\\n     */\\n    constructor(\\n        IRealitio _realitio,\\n        string memory _metadata,\\n        uint32 _foreignEid,\\n        address _endpoint\\n    ) OApp(_endpoint, msg.sender) Ownable(msg.sender) {\\n        realitio = _realitio;\\n        metadata = _metadata;\\n        foreignEid = _foreignEid;\\n    }\\n\\n    /**\\n     * @notice Allows the contract to receive ETH deposits for LayerZero fees.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Allows the owner to withdraw ETH from the contract.\\n     * @param _amount The amount of ETH to withdraw.\\n     */\\n    function withdrawETH(uint256 _amount) external onlyOwner {\\n        require(_amount <= address(this).balance, \\\"Insufficient balance\\\");\\n        payable(owner()).transfer(_amount);\\n    }\\n\\n    /**\\n     * @notice LayerZero message receive function.\\n     * @dev Routes incoming messages to appropriate handler functions.\\n     */\\n    function _lzReceive(\\n        Origin calldata /*_origin*/,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address /*_executor*/,\\n        bytes calldata /*_extraData*/\\n    ) internal override {\\n        // Decode message type first\\n        uint16 msgType;\\n        bytes memory payload;\\n        \\n        try this._decodeMessage(_message) returns (uint16 _msgType, bytes memory _payload) {\\n            msgType = _msgType;\\n            payload = _payload;\\n        } catch {\\n            revert(\\\"Invalid message format\\\");\\n        }\\n        \\n        // Route message based on type\\n        if (msgType == MSG_TYPE_ARBITRATION_REQUEST) {\\n            try this._decodeArbitrationRequest(payload) returns (bytes32 questionID, address requester, uint256 maxPrevious) {\\n                _handleArbitrationRequest(questionID, requester, maxPrevious);\\n            } catch {\\n                revert(\\\"Invalid arbitration request payload\\\");\\n            }\\n        } else if (msgType == MSG_TYPE_ARBITRATION_FAILURE) {\\n            try this._decodeArbitrationFailure(payload) returns (bytes32 questionID, address requester) {\\n                _handleArbitrationFailure(questionID, requester);\\n            } catch {\\n                revert(\\\"Invalid arbitration failure payload\\\");\\n            }\\n        } else if (msgType == MSG_TYPE_ARBITRATION_ANSWER) {\\n            try this._decodeArbitrationAnswer(payload) returns (bytes32 questionID, bytes32 answer) {\\n                _handleArbitrationAnswer(questionID, answer);\\n            } catch {\\n                revert(\\\"Invalid arbitration answer payload\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice External decoder functions for safe message parsing.\\n     * @dev These are marked external to be called via try/catch for error handling.\\n     */\\n    function _decodeMessage(bytes calldata _message) external pure returns (uint16 msgType, bytes memory payload) {\\n        return abi.decode(_message, (uint16, bytes));\\n    }\\n\\n    function _decodeArbitrationRequest(bytes memory _payload) external pure returns (bytes32 questionID, address requester, uint256 maxPrevious) {\\n        return abi.decode(_payload, (bytes32, address, uint256));\\n    }\\n\\n    function _decodeArbitrationFailure(bytes memory _payload) external pure returns (bytes32 questionID, address requester) {\\n        return abi.decode(_payload, (bytes32, address));\\n    }\\n\\n    function _decodeArbitrationAnswer(bytes memory _payload) external pure returns (bytes32 questionID, bytes32 answer) {\\n        return abi.decode(_payload, (bytes32, bytes32));\\n    }\\n\\n    /**\\n     * @dev Receives the requested arbitration for a question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the user that requested arbitration.\\n     * @param _maxPrevious The maximum value of the previous bond for the question.\\n     */\\n    function receiveArbitrationRequest(\\n        bytes32 _questionID,\\n        address _requester,\\n        uint256 _maxPrevious\\n    ) external override {\\n        _handleArbitrationRequest(_questionID, _requester, _maxPrevious);\\n    }\\n\\n    /**\\n     * @dev Internal handler for arbitration requests.\\n     */\\n    function _handleArbitrationRequest(\\n        bytes32 _questionID,\\n        address _requester,\\n        uint256 _maxPrevious\\n    ) internal {\\n        require(_questionID != bytes32(0), \\\"Question ID cannot be empty\\\");\\n        require(_requester != address(0), \\\"Requester cannot be zero address\\\");\\n        \\n        Request storage request = requests[_questionID][_requester];\\n        require(request.status == Status.None, \\\"Request already exists\\\");\\n\\n        try\\n            realitio.notifyOfArbitrationRequest(\\n                _questionID,\\n                _requester,\\n                _maxPrevious\\n            )\\n        {\\n            request.status = Status.Notified;\\n            questionIDToRequester[_questionID] = _requester;\\n\\n            emit RequestNotified(_questionID, _requester, _maxPrevious);\\n        } catch Error(string memory reason) {\\n            /*\\n             * Will fail if:\\n             *  - The question does not exist.\\n             *  - The question was not answered yet.\\n             *  - Another request was already accepted.\\n             *  - Someone increased the bond on the question to a value > _maxPrevious\\n             */\\n            request.status = Status.Rejected;\\n\\n            emit RequestRejected(_questionID, _requester, _maxPrevious, reason);\\n        } catch {\\n            // In case `reject` did not have a reason string or some other error happened\\n            request.status = Status.Rejected;\\n\\n            emit RequestRejected(_questionID, _requester, _maxPrevious, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles arbitration request after it has been notified to Realitio for a given question.\\n     * @dev This method exists because `receiveArbitrationRequest` is called by the AMB and cannot send messages back to it.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the user that requested arbitration.\\n     */\\n    function handleNotifiedRequest(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external override {\\n        Request storage request = requests[_questionID][_requester];\\n        require(request.status == Status.Notified, \\\"Invalid request status\\\");\\n\\n        request.status = Status.AwaitingRuling;\\n\\n        bytes memory message = abi.encode(\\n            MSG_TYPE_ARBITRATION_ACKNOWLEDGEMENT,\\n            _questionID,\\n            _requester\\n        );\\n        \\n        // LayerZero fee calculation\\n        bytes memory gasOptions = abi.encodePacked(uint16(1), uint128(200000)); // Set gas limit to 200,000 for acknowledgement processing\\n        bytes memory options = this.combineOptions(foreignEid, MSG_TYPE_ARBITRATION_ACKNOWLEDGEMENT, gasOptions);\\n        MessagingFee memory fee = _quote(foreignEid, message, options, false);\\n        \\n        // Check contract balance for LayerZero fee\\n        if (address(this).balance < fee.nativeFee) {\\n            revert InsufficientFundsForLayerZero(fee.nativeFee, address(this).balance);\\n        }\\n        \\n        _lzSend(\\n            foreignEid,\\n            message,\\n            options,\\n            MessagingFee(fee.nativeFee, 0),\\n            payable(address(this))\\n        );\\n\\n        emit RequestAcknowledged(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @notice Handles arbitration request after it has been rejected.\\n     * @dev This method exists because `receiveArbitrationRequest` is called by the AMB and cannot send messages back to it.\\n     * Reasons why the request might be rejected:\\n     *  - The question does not exist\\n     *  - The question was not answered yet\\n     *  - The question bond value changed while the arbitration was being requested\\n     *  - Another request was already accepted\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the user that requested arbitration.\\n     */\\n    function handleRejectedRequest(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external override {\\n        Request storage request = requests[_questionID][_requester];\\n        require(request.status == Status.Rejected, \\\"Invalid request status\\\");\\n\\n        // At this point, only the request.status is set, simply resetting the status to Status.None is enough.\\n        request.status = Status.None;\\n\\n        bytes memory message = abi.encode(\\n            MSG_TYPE_ARBITRATION_CANCELATION,\\n            _questionID,\\n            _requester\\n        );\\n        \\n        // LayerZero fee calculation\\n        bytes memory gasOptions = abi.encodePacked(uint16(1), uint128(150000)); // Set gas limit to 150,000 for cancelation processing\\n        bytes memory options = this.combineOptions(foreignEid, MSG_TYPE_ARBITRATION_CANCELATION, gasOptions);\\n        MessagingFee memory fee = _quote(foreignEid, message, options, false);\\n        \\n        // Check contract balance for LayerZero fee\\n        if (address(this).balance < fee.nativeFee) {\\n            revert InsufficientFundsForLayerZero(fee.nativeFee, address(this).balance);\\n        }\\n        \\n        _lzSend(\\n            foreignEid,\\n            message,\\n            options,\\n            MessagingFee(fee.nativeFee, 0),\\n            payable(address(this))\\n        );\\n\\n        emit RequestCanceled(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @notice Receives a failed attempt to request arbitration. TRUSTED.\\n     * @dev Currently this can happen only if the arbitration cost increased.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the user that requested arbitration.\\n     */\\n    function receiveArbitrationFailure(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external override {\\n        _handleArbitrationFailure(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @dev Internal handler for arbitration failures.\\n     */\\n    function _handleArbitrationFailure(\\n        bytes32 _questionID,\\n        address _requester\\n    ) internal {\\n        require(_questionID != bytes32(0), \\\"Question ID cannot be empty\\\");\\n        require(_requester != address(0), \\\"Requester cannot be zero address\\\");\\n        \\n        Request storage request = requests[_questionID][_requester];\\n        require(\\n            request.status == Status.AwaitingRuling,\\n            \\\"Invalid request status\\\"\\n        );\\n\\n        // At this point, only the request.status is set, simply resetting the status to Status.None is enough.\\n        request.status = Status.None;\\n\\n        realitio.cancelArbitration(_questionID);\\n\\n        emit ArbitrationFailed(_questionID, _requester);\\n    }\\n\\n    /**\\n     * @notice Receives an answer to a specified question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _answer The answer from the arbitrator.\\n     */\\n    function receiveArbitrationAnswer(\\n        bytes32 _questionID,\\n        bytes32 _answer\\n    ) external override {\\n        _handleArbitrationAnswer(_questionID, _answer);\\n    }\\n\\n    /**\\n     * @dev Internal handler for arbitration answers.\\n     */\\n    function _handleArbitrationAnswer(\\n        bytes32 _questionID,\\n        bytes32 _answer\\n    ) internal {\\n        require(_questionID != bytes32(0), \\\"Question ID cannot be empty\\\");\\n        \\n        address requester = questionIDToRequester[_questionID];\\n        require(requester != address(0), \\\"No requester found for question\\\");\\n        \\n        Request storage request = requests[_questionID][requester];\\n        require(\\n            request.status == Status.AwaitingRuling,\\n            \\\"Invalid request status\\\"\\n        );\\n\\n        request.status = Status.Ruled;\\n        request.arbitratorAnswer = _answer;\\n\\n        emit ArbitratorAnswered(_questionID, _answer);\\n    }\\n\\n    /**\\n     * @notice Reports the answer provided by the arbitrator to a specified question.\\n     * @dev The Realitio contract validates the input parameters passed to this method,\\n     * so making this publicly accessible is safe.\\n     * @param _questionID The ID of the question.\\n     * @param _lastHistoryHash The history hash given with the last answer to the question in the Realitio contract.\\n     * @param _lastAnswerOrCommitmentID The last answer given, or its commitment ID if it was a commitment,\\n     * to the question in the Realitio contract.\\n     * @param _lastAnswerer The last answerer to the question in the Realitio contract.\\n     */\\n    function reportArbitrationAnswer(\\n        bytes32 _questionID,\\n        bytes32 _lastHistoryHash,\\n        bytes32 _lastAnswerOrCommitmentID,\\n        address _lastAnswerer\\n    ) external {\\n        address requester = questionIDToRequester[_questionID];\\n        Request storage request = requests[_questionID][requester];\\n        require(request.status == Status.Ruled, \\\"Arbitrator has not ruled yet\\\");\\n\\n        request.status = Status.Finished;\\n\\n        realitio.assignWinnerAndSubmitAnswerByArbitrator(\\n            _questionID,\\n            request.arbitratorAnswer,\\n            requester,\\n            _lastHistoryHash,\\n            _lastAnswerOrCommitmentID,\\n            _lastAnswerer\\n        );\\n\\n        emit ArbitrationFinished(_questionID);\\n    }\\n}\\n\",\"keccak256\":\"0xc34b6a68fc1c2941776fab5eb26ea9fc3d74861f6797cf74803388f3bd6350df\",\"license\":\"MIT\"},\"src/interfaces/IArbitrationProxies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IHomeArbitrationProxy {\\n    /**\\n     * @notice To be emitted when the Realitio contract has been notified of an arbitration request.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the previous bond for the question.\\n     */\\n    event RequestNotified(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 _maxPrevious\\n    );\\n\\n    /**\\n     * @notice To be emitted when arbitration request is rejected.\\n     * @dev This can happen if the current bond for the question is higher than maxPrevious\\n     * or if the question is already finalized.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the current bond for the question.\\n     * @param _reason The reason why the request was rejected.\\n     */\\n    event RequestRejected(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 _maxPrevious,\\n        string _reason\\n    );\\n\\n    /**\\n     * @notice To be emitted when the arbitration request acknowledgement is sent to the Foreign Chain.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event RequestAcknowledged(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice To be emitted when the arbitration request is canceled.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event RequestCanceled(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice To be emitted when the dispute could not be created on the Foreign Chain.\\n     * @dev This will happen if the arbitration fee increases in between the arbitration request and acknowledgement.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event ArbitrationFailed(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice To be emitted when receiving the answer from the arbitrator.\\n     * @param _questionID The ID of the question.\\n     * @param _answer The answer from the arbitrator.\\n     */\\n    event ArbitratorAnswered(bytes32 indexed _questionID, bytes32 _answer);\\n\\n    /**\\n     * @notice To be emitted when reporting the arbitrator answer to Realitio.\\n     * @param _questionID The ID of the question.\\n     */\\n    event ArbitrationFinished(bytes32 indexed _questionID);\\n\\n    /**\\n     * @dev Receives the requested arbitration for a question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    function receiveArbitrationRequest(\\n        bytes32 _questionID,\\n        address _requester,\\n        uint256 _maxPrevious\\n    ) external;\\n\\n    /**\\n     * @notice Handles arbitration request after it has been notified to Realitio for a given question.\\n     * @dev This method exists because `receiveArbitrationRequest` is called by\\n     * the bridge and cannot send messages back to it.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleNotifiedRequest(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Handles arbitration request after it has been rejected.\\n     * @dev This method exists because `receiveArbitrationRequest` is called by\\n     * the bridge and cannot send messages back to it.\\n     * Reasons why the request might be rejected:\\n     *  - The question does not exist\\n     *  - The question was not answered yet\\n     *  - The quesiton bond value changed while the arbitration was being requested\\n     *  - Another request was already accepted\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleRejectedRequest(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Receives a failed attempt to request arbitration. TRUSTED.\\n     * @dev Currently this can happen only if the arbitration cost increased.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function receiveArbitrationFailure(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Receives the answer to a specified question. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _answer The answer from the arbitrator.\\n     */\\n    function receiveArbitrationAnswer(\\n        bytes32 _questionID,\\n        bytes32 _answer\\n    ) external;\\n\\n    /** @notice Provides a string of json-encoded metadata with the following properties:\\n         - tos: A URI representing the location of a terms-of-service document for the arbitrator.\\n         - template_hashes: An array of hashes of templates supported by the arbitrator. If you have a numerical ID for a template registered with Reality.eth, you can look up this hash by calling the Reality.eth template_hashes() function.\\n     *  @dev Template_hashes won't be used by this home proxy. \\n     */\\n    function metadata() external view returns (string calldata);\\n}\\n\\ninterface IForeignArbitrationProxy {\\n    /**\\n     * @notice Should be emitted when the arbitration is requested.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    event ArbitrationRequested(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 _maxPrevious\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the dispute is created.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     * @param _disputeID The ID of the dispute.\\n     */\\n    event ArbitrationCreated(\\n        bytes32 indexed _questionID,\\n        address indexed _requester,\\n        uint256 indexed _disputeID\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the arbitration is canceled by the Home Chain.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event ArbitrationCanceled(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the dispute could not be created.\\n     * @dev This will happen if there is an increase in the arbitration fees\\n     * between the time the arbitration is made and the time it is acknowledged.\\n     * @param _questionID The ID of the question with the request for arbitration.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    event ArbitrationFailed(\\n        bytes32 indexed _questionID,\\n        address indexed _requester\\n    );\\n\\n    /**\\n     * @notice Should be emitted when the ruling is relayed to home proxy manually. Some implementations may not emit this event.\\n     * @param _questionID The ID of the question with the ruling to relay.\\n     * @param _ruling Ruling converted into Realitio format.\\n     */\\n    event RulingRelayed(bytes32 _questionID, bytes32 _ruling);\\n\\n    /**\\n     * @notice Requests arbitration for the given question and contested answer.\\n     * @param _questionID The ID of the question.\\n     * @param _maxPrevious The maximum value of the current bond for the question. The arbitration request will get rejected if the current bond is greater than _maxPrevious. If set to 0, _maxPrevious is ignored.\\n     */\\n    function requestArbitration(\\n        bytes32 _questionID,\\n        uint256 _maxPrevious\\n    ) external payable;\\n\\n    /**\\n     * @notice Receives the acknowledgement of the arbitration request for the given question and requester. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function receiveArbitrationAcknowledgement(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Receives the cancelation of the arbitration request for the given question and requester. TRUSTED.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function receiveArbitrationCancelation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Cancels the arbitration in case the dispute could not be created.\\n     * @param _questionID The ID of the question.\\n     * @param _requester The address of the arbitration requester.\\n     */\\n    function handleFailedDisputeCreation(\\n        bytes32 _questionID,\\n        address _requester\\n    ) external;\\n\\n    /**\\n     * @notice Gets the fee to create a dispute.\\n     * @param _questionID the ID of the question.\\n     * @return The fee to create a dispute.\\n     */\\n    function getDisputeFee(bytes32 _questionID) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x503105f2d1c14e59306faa78387cef13c175e261a9fc2985b2578ae3726162ff\",\"license\":\"MIT\"},\"src/interfaces/IRealitio.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@ferittuncer]\\n *  @reviewers: [@hbarcelos]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.24;\\n\\n/**\\n *  @title IRealitio\\n *  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\\n */\\ninterface IRealitio {\\n    event LogNewAnswer(\\n        bytes32 answer,\\n        bytes32 indexed question_id,\\n        bytes32 history_hash,\\n        address indexed user,\\n        uint256 bond,\\n        uint256 ts,\\n        bool is_commitment\\n    );\\n\\n    event LogNewTemplate(\\n        uint256 indexed template_id,\\n        address indexed user,\\n        string question_text\\n    );\\n\\n    event LogNewQuestion(\\n        bytes32 indexed question_id,\\n        address indexed user,\\n        uint256 template_id,\\n        string question,\\n        bytes32 indexed content_hash,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 created\\n    );\\n\\n    /**\\n     * @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\\n     * @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\\n     * @param question_id The ID of the question.\\n     * @param requester The account that requested arbitration.\\n     * @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\\n     */\\n    function notifyOfArbitrationRequest(\\n        bytes32 question_id,\\n        address requester,\\n        uint256 max_previous\\n    ) external;\\n\\n    /**\\n     * @notice Cancel a previously-requested arbitration and extend the timeout\\n     * @dev Useful when doing arbitration across chains that can't be requested atomically\\n     * @param question_id The ID of the question\\n     */\\n    function cancelArbitration(bytes32 question_id) external;\\n\\n    /**\\n     * @notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\\n     * @dev Doesn't require (or allow) a bond.\\n     * @param question_id The ID of the question\\n     * @param answer The answer, encoded into bytes32\\n     * @param payee_if_wrong The account to be credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\\n     * @param last_history_hash The history hash before the final one\\n     * @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\\n     * @param last_answerer The address that supplied the last answer\\n     */\\n    function assignWinnerAndSubmitAnswerByArbitrator(\\n        bytes32 question_id,\\n        bytes32 answer,\\n        address payee_if_wrong,\\n        bytes32 last_history_hash,\\n        bytes32 last_answer_or_commitment_id,\\n        address last_answerer\\n    ) external;\\n}\\n\",\"keccak256\":\"0x29e7d90b358c8028cc8558272480cfd941ba6f534e90f7bd04c94a4ce0d71b50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200348d3803806200348d8339810160408190526200003491620001d6565b8033818180806200005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006a8162000130565b506001600160a01b0380831660805281166200009957604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000e157600080fd5b505af1158015620000f6573d6000803e3d6000fd5b505050506001600160a01b03881660a05250600392506200011c91508590508262000377565b505063ffffffff1660c05250620004439050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200019657600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b805163ffffffff81168114620001c457600080fd5b919050565b8051620001c48162000180565b60008060008060808587031215620001ed57600080fd5b8451620001fa8162000180565b602086810151919550906001600160401b03808211156200021a57600080fd5b818801915088601f8301126200022f57600080fd5b81518181111562000244576200024462000199565b604051601f8201601f19908116603f011681019083821181831017156200026f576200026f62000199565b816040528281528b868487010111156200028857600080fd5b600093505b82841015620002ac57848401860151818501870152928501926200028d565b6000868483010152809850505050505050620002cb60408601620001af565b9150620002db60608601620001c9565b905092959194509250565b600181811c90821680620002fb57607f821691505b6020821081036200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000372576000816000526020600020601f850160051c810160208610156200034d5750805b601f850160051c820191505b818110156200036e5782815560010162000359565b5050505b505050565b81516001600160401b0381111562000393576200039362000199565b620003ab81620003a48454620002e6565b8462000322565b602080601f831160018114620003e35760008415620003ca5750858301515b600019600386901b1c1916600185901b1785556200036e565b600085815260208120601f198616915b828110156200041457888601518255948401946001909101908401620003f3565b5085821015620004335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c051612fb1620004dc6000396000818161048601528181610b7c01528181610bf701528181610c5501528181610f7f01528181610ffa015261105801526000818161056a015281816108da01528181611b250152611cdb0152600081816103b40152818161071601528181611100015281816117210152818161181f01528181611fd8015261208f0152612fb16000f3fe6080604052600436106101dc5760003560e01c8063902f841311610102578063c77cccc911610095578063e809173c11610064578063e809173c1461067f578063f14210a6146106b4578063f2fde38b146106d4578063ff7bd03d146106f457600080fd5b8063c77cccc9146105ff578063ca5eb5e11461061f578063ccd6e8d21461063f578063d75a86e01461065f57600080fd5b8063bc70b354116100d1578063bc70b35414610538578063bc8802a214610558578063bf6569e01461058c578063c510faf7146105ac57600080fd5b8063902f84131461047457806391602fd7146104bd578063b98bd070146104dd578063bb0b6a53146104fd57600080fd5b8063392f37e91161017a578063715018a611610149578063715018a6146103d65780637d25a05e146103eb57806382413eac146104265780638da5cb5b1461045657600080fd5b8063392f37e91461031d578063452052951461033f5780635535d461146103825780635e280f11146103a257600080fd5b80631ec8b4e8116101b65780631ec8b4e814610272578063241a9f82146102af57806324fd4c05146102cf5780633400288b146102fd57600080fd5b806313137d65146101e857806317442b70146101fd5780631865fed11461022457600080fd5b366101e357005b600080fd5b6101fb6101f6366004612225565b610714565b005b34801561020957600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561023057600080fd5b5061025a61023f3660046122c4565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161021b565b34801561027e57600080fd5b5061029261028d3660046123c7565b6107d4565b604080519283526001600160a01b0390911660208301520161021b565b3480156102bb57600080fd5b506101fb6102ca3660046123fb565b6107f4565b3480156102db57600080fd5b506102ef6102ea36600461243c565b610969565b60405161021b9291906124cd565b34801561030957600080fd5b506101fb610318366004612503565b610985565b34801561032957600080fd5b5061033261099b565b60405161021b919061252d565b34801561034b57600080fd5b5061035f61035a3660046123c7565b610a29565b604080519384526001600160a01b0390921660208401529082015260600161021b565b34801561038e57600080fd5b5061033261039d366004612557565b610a4f565b3480156103ae57600080fd5b5061025a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e257600080fd5b506101fb610a73565b3480156103f757600080fd5b5061040e610406366004612503565b600092915050565b6040516001600160401b03909116815260200161021b565b34801561043257600080fd5b5061044661044136600461258e565b610a87565b604051901515815260200161021b565b34801561046257600080fd5b506000546001600160a01b031661025a565b34801561048057600080fd5b506104a87f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161021b565b3480156104c957600080fd5b506101fb6104d83660046125e9565b610a9c565b3480156104e957600080fd5b506101fb6104f836600461260e565b610cd6565b34801561050957600080fd5b5061052a610518366004612682565b60016020526000908152604090205481565b60405190815260200161021b565b34801561054457600080fd5b5061033261055336600461269d565b610cf0565b34801561056457600080fd5b5061025a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059857600080fd5b506101fb6105a73660046125e9565b610e98565b3480156105b857600080fd5b506105f16105c73660046125e9565b60046020908152600092835260408084209091529082529020805460019091015460ff9091169082565b60405161021b929190612715565b34801561060b57600080fd5b506101fb61061a3660046125e9565b610ea2565b34801561062b57600080fd5b506101fb61063a366004612741565b6110d9565b34801561064b57600080fd5b506101fb61065a36600461275e565b61115f565b34801561066b57600080fd5b506101fb61067a366004612796565b61116f565b34801561068b57600080fd5b5061069f61069a3660046123c7565b611179565b6040805192835260208301919091520161021b565b3480156106c057600080fd5b506101fb6106cf3660046122c4565b611190565b3480156106e057600080fd5b506101fb6106ef366004612741565b611218565b34801561070057600080fd5b5061044661070f3660046127b8565b611256565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610764576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061077e90610779908a612682565b61128c565b146107bc576107906020880188612682565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161075b565b6107cb878787878787876112ce565b50505050505050565b600080828060200190518101906107eb91906127d4565b91509150915091565b60008481526005602090815260408083205460048084528285206001600160a01b0390921680865291909352922090815460ff166005811115610839576108396126ff565b146108865760405162461bcd60e51b815260206004820152601c60248201527f41726269747261746f7220686173206e6f742072756c65642079657400000000604482015260640161075b565b805460ff1916600517815560018101546040516335138a4f60e21b81526004810188905260248101919091526001600160a01b038381166044830152606482018790526084820186905284811660a48301527f0000000000000000000000000000000000000000000000000000000000000000169063d44e293c9060c401600060405180830381600087803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b50506040518892507f2abf2fd86256e4607561adae782a4853682b6c0b976995a9a45c5fc3a17573869150600090a2505050505050565b60006060610979838501856127f9565b915091505b9250929050565b61098d611639565b6109978282611666565b5050565b600380546109a890612848565b80601f01602080910402602001604051908101604052809291908181526020018280546109d490612848565b8015610a215780601f106109f657610100808354040283529160200191610a21565b820191906000526020600020905b815481529060010190602001808311610a0457829003601f168201915b505050505081565b600080600083806020019051810190610a42919061287c565b9250925092509193909250565b6002602090815260009283526040808420909152908252902080546109a890612848565b610a7b611639565b610a8560006116bb565b565b6001600160a01b03811630145b949350505050565b60008281526004602090815260408083206001600160a01b038516845290915290206002815460ff166005811115610ad657610ad66126ff565b14610af35760405162461bcd60e51b815260040161075b906128b5565b805460ff1916600317815560408051600260208201529081018490526001600160a01b038316606082015260009060800160405160208183030381529060405290506000600162030d40604051602001610b4e9291906128e5565b60408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490610ba9907f0000000000000000000000000000000000000000000000000000000000000000906002908790600401612918565b600060405180830381865afa158015610bc6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bee9190810190612990565b90506000610c1f7f00000000000000000000000000000000000000000000000000000000000000008584600061170b565b8051909150471015610c505780516040516334b2107560e11b8152600481019190915247602482015260440161075b565b610c967f000000000000000000000000000000000000000000000000000000000000000085846040518060400160405280866000015181526020016000815250306117ec565b506040516001600160a01b0387169088907fff09615c531ab8799ea1c67a0952ddbef1c864ef91d390995d0dc07656f4210f90600090a350505050505050565b610cde611639565b610997610ceb82846129c4565b6118f7565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610d2490612848565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5090612848565b8015610d9d5780601f10610d7257610100808354040283529160200191610d9d565b820191906000526020600020905b815481529060010190602001808311610d8057829003601f168201915b505050505090508051600003610ded5783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610a949350505050565b6000839003610dfd579050610a94565b60028310610e7b57610e4484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a0992505050565b80610e528460028188612a9f565b604051602001610e6493929190612ac9565b604051602081830303815290604052915050610a94565b8383604051639a6d49cd60e01b815260040161075b929190612af1565b6109978282611a35565b60008281526004602090815260408083206001600160a01b038516845290915290206001815460ff166005811115610edc57610edc6126ff565b14610ef95760405162461bcd60e51b815260040161075b906128b5565b805460ff1916815560408051600360208201529081018490526001600160a01b0383166060820152600090608001604051602081830303815290604052905060006001620249f0604051602001610f519291906128e5565b60408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490610fac907f0000000000000000000000000000000000000000000000000000000000000000906003908790600401612918565b600060405180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ff19190810190612990565b905060006110227f00000000000000000000000000000000000000000000000000000000000000008584600061170b565b80519091504710156110535780516040516334b2107560e11b8152600481019190915247602482015260440161075b565b6110997f000000000000000000000000000000000000000000000000000000000000000085846040518060400160405280866000015181526020016000815250306117ec565b506040516001600160a01b0387169088907ff313a768599b60b7f8aedb7757d867d09463365b79b55b86ed3c961e6da5a24990600090a350505050505050565b6110e1611639565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561114457600080fd5b505af1158015611158573d6000803e3d6000fd5b5050505050565b61116a838383611bbc565b505050565b6109978282611e86565b600080828060200190518101906107eb9190612b20565b611198611639565b478111156111df5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161075b565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610997573d6000803e3d6000fd5b611220611639565b6001600160a01b03811661124a57604051631e4fbdf760e01b81526000600482015260240161075b565b611253816116bb565b50565b600060208201803590600190839061126e9086612682565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806112c85760405163f6ff4fb760e01b815263ffffffff8416600482015260240161075b565b92915050565b6040516324fd4c0560e01b815260009060609030906324fd4c05906112f9908a908a90600401612af1565b600060405180830381865afa92505050801561133757506040513d6000823e601f3d908101601f191682016040526113349190810190612b44565b60015b61137c5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b595cdcd859d948199bdc9b585d60521b604482015260640161075b565b909250905060001961ffff83160161145557604051634520529560e01b815230906345205295906113b190849060040161252d565b606060405180830381865afa9250505080156113ea575060408051601f3d908101601f191682019092526113e79181019061287c565b60015b6114425760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206172626974726174696f6e2072657175657374207061796c6044820152621bd85960ea1b606482015260840161075b565b61144d838383611bbc565b50505061162e565b60031961ffff831601611526576040516303d9169d60e31b81523090631ec8b4e89061148590849060040161252d565b6040805180830381865afa9250505080156114bd575060408051601f3d908101601f191682019092526114ba918101906127d4565b60015b6115155760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206172626974726174696f6e206661696c757265207061796c6044820152621bd85960ea1b606482015260840161075b565b61151f8282611a35565b505061162e565b60041961ffff8316016115ef57604051633a0245cf60e21b8152309063e809173c9061155690849060040161252d565b6040805180830381865afa92505050801561158e575060408051601f3d908101601f1916820190925261158b91810190612b20565b60015b6115e55760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964206172626974726174696f6e20616e73776572207061796c6f604482015261185960f21b606482015260840161075b565b61151f8282611e86565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206d657373616765207479706560601b604482015260640161075b565b505050505050505050565b6000546001600160a01b03163314610a855760405163118cdaa760e01b815233600482015260240161075b565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff16815260200161176e8961128c565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016117a3929190612b8a565b6040805180830381865afa1580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190612c51565b95945050505050565b6117f4612170565b60006118038460000151611fac565b60208501519091501561181d5761181d8460200151611fd4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200161186d8c61128c565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016118a9929190612b8a565b60806040518083038185885af11580156118c7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118ec9190612c6d565b979650505050505050565b60005b81518110156119ce5761192982828151811061191857611918612cc7565b602002602001015160400151611a09565b81818151811061193b5761193b612cc7565b6020026020010151604001516002600084848151811061195d5761195d612cc7565b60200260200101516000015163ffffffff1663ffffffff168152602001908152602001600020600084848151811061199757611997612cc7565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816119c59190612d2d565b506001016118fa565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516119fe9190612dec565b60405180910390a150565b600281015161ffff81166003146109975781604051639a6d49cd60e01b815260040161075b919061252d565b81611a525760405162461bcd60e51b815260040161075b90612e69565b6001600160a01b038116611aa85760405162461bcd60e51b815260206004820181905260248201527f5265717565737465722063616e6e6f74206265207a65726f2061646472657373604482015260640161075b565b60008281526004602090815260408083206001600160a01b038516845290915290206003815460ff166005811115611ae257611ae26126ff565b14611aff5760405162461bcd60e51b815260040161075b906128b5565b805460ff19168155604051630ebbdd2b60e41b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ebbdd2b090602401600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b50506040516001600160a01b03851692508591507f9beda0c81abc1c65da7685f113195974dfddb781dfde6263e5a1b13a5356ffad90600090a3505050565b82611bd95760405162461bcd60e51b815260040161075b90612e69565b6001600160a01b038216611c2f5760405162461bcd60e51b815260206004820181905260248201527f5265717565737465722063616e6e6f74206265207a65726f2061646472657373604482015260640161075b565b60008381526004602090815260408083206001600160a01b0386168452909152812090815460ff166005811115611c6857611c686126ff565b14611cae5760405162461bcd60e51b81526020600482015260166024820152755265717565737420616c72656164792065786973747360501b604482015260640161075b565b60405163f6a94ecb60e01b8152600481018590526001600160a01b038481166024830152604482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f6a94ecb90606401600060405180830381600087803b158015611d1f57600080fd5b505af1925050508015611d30575060015b611e1357611d3c612ea0565b806308c379a003611db35750611d50612ebc565b80611d5b5750611db5565b815460ff191660011782556040516001600160a01b0385169086907ff677e762f2ddc710deec335dd0cfa8a65cc9c9c351b268243be8629f2e8d1b5f90611da59087908690612f45565b60405180910390a350611e80565b505b805460ff19166001178155604080518381526020810182905260008183015290516001600160a01b0385169186917ff677e762f2ddc710deec335dd0cfa8a65cc9c9c351b268243be8629f2e8d1b5f916060908290030190a3611e80565b805460ff1916600217815560008481526005602090815260409182902080546001600160a01b0387166001600160a01b03199091168117909155915184815286917ff56e18fc84dbd66db78337b5bd0973943fa70c9b52243a540bdac79274f6682d910160405180910390a35b50505050565b81611ea35760405162461bcd60e51b815260040161075b90612e69565b6000828152600560205260409020546001600160a01b031680611f085760405162461bcd60e51b815260206004820152601f60248201527f4e6f2072657175657374657220666f756e6420666f72207175657374696f6e00604482015260640161075b565b60008381526004602090815260408083206001600160a01b038516845290915290206003815460ff166005811115611f4257611f426126ff565b14611f5f5760405162461bcd60e51b815260040161075b906128b5565b805460ff191660041781556001810183905560405183815284907f1813d15d8cef51cff8bbd419a8e13e0655c1babea320dea4174d5e7bc40c42949060200160405180910390a250505050565b6000813414611fd0576040516304fb820960e51b815234600482015260240161075b565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190612f5e565b90506001600160a01b038116612081576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660448501526064808501889052855180860390910181526084909401909452602080840180516001600160e01b03166323b872dd60e01b1781528451610997968816958993611e8093889360009283929091839182885af180612122576040513d6000823e3d81fd5b50506000513d9150811561213a578060011415612147565b6001600160a01b0384163b155b15611e8057604051635274afe760e01b81526001600160a01b038516600482015260240161075b565b60405180606001604052806000801916815260200160006001600160401b031681526020016121b2604051806040016040528060008152602001600081525090565b905290565b6000606082840312156121c957600080fd5b50919050565b60008083601f8401126121e157600080fd5b5081356001600160401b038111156121f857600080fd5b60208301915083602082850101111561097e57600080fd5b6001600160a01b038116811461125357600080fd5b600080600080600080600060e0888a03121561224057600080fd5b61224a89896121b7565b96506060880135955060808801356001600160401b038082111561226d57600080fd5b6122798b838c016121cf565b909750955060a08a0135915061228e82612210565b90935060c089013590808211156122a457600080fd5b506122b18a828b016121cf565b989b979a50959850939692959293505050565b6000602082840312156122d657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b606081018181106001600160401b0382111715612312576123126122dd565b60405250565b601f8201601f191681016001600160401b038111828210171561233d5761233d6122dd565b6040525050565b60006001600160401b0382111561235d5761235d6122dd565b50601f01601f191660200190565b600082601f83011261237c57600080fd5b813561238781612344565b6040516123948282612318565b8281528560208487010111156123a957600080fd5b82602086016020830137600092810160200192909252509392505050565b6000602082840312156123d957600080fd5b81356001600160401b038111156123ef57600080fd5b610a948482850161236b565b6000806000806080858703121561241157600080fd5b843593506020850135925060408501359150606085013561243181612210565b939692955090935050565b6000806020838503121561244f57600080fd5b82356001600160401b0381111561246557600080fd5b612471858286016121cf565b90969095509350505050565b60005b83811015612498578181015183820152602001612480565b50506000910152565b600081518084526124b981602086016020860161247d565b601f01601f19169290920160200192915050565b61ffff83168152604060208201526000610a9460408301846124a1565b803563ffffffff811681146124fe57600080fd5b919050565b6000806040838503121561251657600080fd5b61251f836124ea565b946020939093013593505050565b60208152600061254060208301846124a1565b9392505050565b61ffff8116811461125357600080fd5b6000806040838503121561256a57600080fd5b612573836124ea565b9150602083013561258381612547565b809150509250929050565b60008060008060a085870312156125a457600080fd5b6125ae86866121b7565b935060608501356001600160401b038111156125c957600080fd5b6125d5878288016121cf565b909450925050608085013561243181612210565b600080604083850312156125fc57600080fd5b82359150602083013561258381612210565b6000806020838503121561262157600080fd5b82356001600160401b038082111561263857600080fd5b818501915085601f83011261264c57600080fd5b81358181111561265b57600080fd5b8660208260051b850101111561267057600080fd5b60209290920196919550909350505050565b60006020828403121561269457600080fd5b612540826124ea565b600080600080606085870312156126b357600080fd5b6126bc856124ea565b935060208501356126cc81612547565b925060408501356001600160401b038111156126e757600080fd5b6126f3878288016121cf565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b604081016006841061273757634e487b7160e01b600052602160045260246000fd5b9281526020015290565b60006020828403121561275357600080fd5b813561254081612210565b60008060006060848603121561277357600080fd5b83359250602084013561278581612210565b929592945050506040919091013590565b600080604083850312156127a957600080fd5b50508035926020909101359150565b6000606082840312156127ca57600080fd5b61254083836121b7565b600080604083850312156127e757600080fd5b82519150602083015161258381612210565b6000806040838503121561280c57600080fd5b823561281781612547565b915060208301356001600160401b0381111561283257600080fd5b61283e8582860161236b565b9150509250929050565b600181811c9082168061285c57607f821691505b6020821081036121c957634e487b7160e01b600052602260045260246000fd5b60008060006060848603121561289157600080fd5b8351925060208401516128a381612210565b80925050604084015190509250925092565b602080825260169082015275496e76616c696420726571756573742073746174757360501b604082015260600190565b60f09290921b6001600160f01b031916825260801b6fffffffffffffffffffffffffffffffff1916600282015260120190565b63ffffffff8416815261ffff831660208201526060604082015260006117e360608301846124a1565b600082601f83011261295257600080fd5b815161295d81612344565b60405161296a8282612318565b82815285602084870101111561297f57600080fd5b6117e383602083016020880161247d565b6000602082840312156129a257600080fd5b81516001600160401b038111156129b857600080fd5b610a9484828501612941565b60006001600160401b03808411156129de576129de6122dd565b8360051b6020604080516129f483850182612318565b8781529286019282810136851115612a0b57600080fd5b875b85811015612a9157803587811115612a255760008081fd5b89016060368290031215612a395760008081fd5b8451612a44816122f3565b612a4d826124ea565b815286820135612a5c81612547565b818801528186013589811115612a725760008081fd5b612a7e3682850161236b565b8288015250835250908401908401612a0d565b509098975050505050505050565b60008085851115612aaf57600080fd5b83861115612abc57600080fd5b5050820193919092039150565b60008451612adb81846020890161247d565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008060408385031215612b3357600080fd5b505080516020909101519092909150565b60008060408385031215612b5757600080fd5b8251612b6281612547565b60208401519092506001600160401b03811115612b7e57600080fd5b61283e85828601612941565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152612bc060e08401826124a1565b90506060850151603f198483030160a0850152612bdd82826124a1565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215612c1557600080fd5b604051604081018181106001600160401b0382111715612c3757612c376122dd565b604052825181526020928301519281019290925250919050565b600060408284031215612c6357600080fd5b6125408383612c03565b600060808284031215612c7f57600080fd5b604051612c8b816122f3565b8251815260208301516001600160401b0381168114612ca957600080fd5b6020820152612cbb8460408501612c03565b60408201529392505050565b634e487b7160e01b600052603260045260246000fd5b601f82111561116a576000816000526020600020601f850160051c81016020861015612d065750805b601f850160051c820191505b81811015612d2557828155600101612d12565b505050505050565b81516001600160401b03811115612d4657612d466122dd565b612d5a81612d548454612848565b84612cdd565b602080601f831160018114612d8f5760008415612d775750858301515b600019600386901b1c1916600185901b178555612d25565b600085815260208120601f198616915b82811015612dbe57888601518255948401946001909101908401612d9f565b5085821015612ddc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612a9157888303603f190185528151805163ffffffff1684528781015161ffff16888501528601516060878501819052612e55818601836124a1565b968901969450505090860190600101612e15565b6020808252601b908201527f5175657374696f6e2049442063616e6e6f7420626520656d7074790000000000604082015260600190565b600060033d1115612eb95760046000803e5060005160e01c5b90565b600060443d1015612eca5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ef957505050505090565b8285019150815181811115612f115750505050505090565b843d8701016020828501011115612f2b5750505050505090565b612f3a60208286010187612318565b509095945050505050565b828152604060208201526000610a9460408301846124a1565b600060208284031215612f7057600080fd5b81516125408161221056fea2646970667358221220743ff78afedd4012f4c1ecac10c0674fe0c25671cd82b1404ad82df39998940764736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c8063902f841311610102578063c77cccc911610095578063e809173c11610064578063e809173c1461067f578063f14210a6146106b4578063f2fde38b146106d4578063ff7bd03d146106f457600080fd5b8063c77cccc9146105ff578063ca5eb5e11461061f578063ccd6e8d21461063f578063d75a86e01461065f57600080fd5b8063bc70b354116100d1578063bc70b35414610538578063bc8802a214610558578063bf6569e01461058c578063c510faf7146105ac57600080fd5b8063902f84131461047457806391602fd7146104bd578063b98bd070146104dd578063bb0b6a53146104fd57600080fd5b8063392f37e91161017a578063715018a611610149578063715018a6146103d65780637d25a05e146103eb57806382413eac146104265780638da5cb5b1461045657600080fd5b8063392f37e91461031d578063452052951461033f5780635535d461146103825780635e280f11146103a257600080fd5b80631ec8b4e8116101b65780631ec8b4e814610272578063241a9f82146102af57806324fd4c05146102cf5780633400288b146102fd57600080fd5b806313137d65146101e857806317442b70146101fd5780631865fed11461022457600080fd5b366101e357005b600080fd5b6101fb6101f6366004612225565b610714565b005b34801561020957600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561023057600080fd5b5061025a61023f3660046122c4565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161021b565b34801561027e57600080fd5b5061029261028d3660046123c7565b6107d4565b604080519283526001600160a01b0390911660208301520161021b565b3480156102bb57600080fd5b506101fb6102ca3660046123fb565b6107f4565b3480156102db57600080fd5b506102ef6102ea36600461243c565b610969565b60405161021b9291906124cd565b34801561030957600080fd5b506101fb610318366004612503565b610985565b34801561032957600080fd5b5061033261099b565b60405161021b919061252d565b34801561034b57600080fd5b5061035f61035a3660046123c7565b610a29565b604080519384526001600160a01b0390921660208401529082015260600161021b565b34801561038e57600080fd5b5061033261039d366004612557565b610a4f565b3480156103ae57600080fd5b5061025a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e257600080fd5b506101fb610a73565b3480156103f757600080fd5b5061040e610406366004612503565b600092915050565b6040516001600160401b03909116815260200161021b565b34801561043257600080fd5b5061044661044136600461258e565b610a87565b604051901515815260200161021b565b34801561046257600080fd5b506000546001600160a01b031661025a565b34801561048057600080fd5b506104a87f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161021b565b3480156104c957600080fd5b506101fb6104d83660046125e9565b610a9c565b3480156104e957600080fd5b506101fb6104f836600461260e565b610cd6565b34801561050957600080fd5b5061052a610518366004612682565b60016020526000908152604090205481565b60405190815260200161021b565b34801561054457600080fd5b5061033261055336600461269d565b610cf0565b34801561056457600080fd5b5061025a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059857600080fd5b506101fb6105a73660046125e9565b610e98565b3480156105b857600080fd5b506105f16105c73660046125e9565b60046020908152600092835260408084209091529082529020805460019091015460ff9091169082565b60405161021b929190612715565b34801561060b57600080fd5b506101fb61061a3660046125e9565b610ea2565b34801561062b57600080fd5b506101fb61063a366004612741565b6110d9565b34801561064b57600080fd5b506101fb61065a36600461275e565b61115f565b34801561066b57600080fd5b506101fb61067a366004612796565b61116f565b34801561068b57600080fd5b5061069f61069a3660046123c7565b611179565b6040805192835260208301919091520161021b565b3480156106c057600080fd5b506101fb6106cf3660046122c4565b611190565b3480156106e057600080fd5b506101fb6106ef366004612741565b611218565b34801561070057600080fd5b5061044661070f3660046127b8565b611256565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610764576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061077e90610779908a612682565b61128c565b146107bc576107906020880188612682565b60405163309afaf360e21b815263ffffffff90911660048201526020880135602482015260440161075b565b6107cb878787878787876112ce565b50505050505050565b600080828060200190518101906107eb91906127d4565b91509150915091565b60008481526005602090815260408083205460048084528285206001600160a01b0390921680865291909352922090815460ff166005811115610839576108396126ff565b146108865760405162461bcd60e51b815260206004820152601c60248201527f41726269747261746f7220686173206e6f742072756c65642079657400000000604482015260640161075b565b805460ff1916600517815560018101546040516335138a4f60e21b81526004810188905260248101919091526001600160a01b038381166044830152606482018790526084820186905284811660a48301527f0000000000000000000000000000000000000000000000000000000000000000169063d44e293c9060c401600060405180830381600087803b15801561091e57600080fd5b505af1158015610932573d6000803e3d6000fd5b50506040518892507f2abf2fd86256e4607561adae782a4853682b6c0b976995a9a45c5fc3a17573869150600090a2505050505050565b60006060610979838501856127f9565b915091505b9250929050565b61098d611639565b6109978282611666565b5050565b600380546109a890612848565b80601f01602080910402602001604051908101604052809291908181526020018280546109d490612848565b8015610a215780601f106109f657610100808354040283529160200191610a21565b820191906000526020600020905b815481529060010190602001808311610a0457829003601f168201915b505050505081565b600080600083806020019051810190610a42919061287c565b9250925092509193909250565b6002602090815260009283526040808420909152908252902080546109a890612848565b610a7b611639565b610a8560006116bb565b565b6001600160a01b03811630145b949350505050565b60008281526004602090815260408083206001600160a01b038516845290915290206002815460ff166005811115610ad657610ad66126ff565b14610af35760405162461bcd60e51b815260040161075b906128b5565b805460ff1916600317815560408051600260208201529081018490526001600160a01b038316606082015260009060800160405160208183030381529060405290506000600162030d40604051602001610b4e9291906128e5565b60408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490610ba9907f0000000000000000000000000000000000000000000000000000000000000000906002908790600401612918565b600060405180830381865afa158015610bc6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bee9190810190612990565b90506000610c1f7f00000000000000000000000000000000000000000000000000000000000000008584600061170b565b8051909150471015610c505780516040516334b2107560e11b8152600481019190915247602482015260440161075b565b610c967f000000000000000000000000000000000000000000000000000000000000000085846040518060400160405280866000015181526020016000815250306117ec565b506040516001600160a01b0387169088907fff09615c531ab8799ea1c67a0952ddbef1c864ef91d390995d0dc07656f4210f90600090a350505050505050565b610cde611639565b610997610ceb82846129c4565b6118f7565b63ffffffff8416600090815260026020908152604080832061ffff87168452909152812080546060929190610d2490612848565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5090612848565b8015610d9d5780601f10610d7257610100808354040283529160200191610d9d565b820191906000526020600020905b815481529060010190602001808311610d8057829003601f168201915b505050505090508051600003610ded5783838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929450610a949350505050565b6000839003610dfd579050610a94565b60028310610e7b57610e4484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a0992505050565b80610e528460028188612a9f565b604051602001610e6493929190612ac9565b604051602081830303815290604052915050610a94565b8383604051639a6d49cd60e01b815260040161075b929190612af1565b6109978282611a35565b60008281526004602090815260408083206001600160a01b038516845290915290206001815460ff166005811115610edc57610edc6126ff565b14610ef95760405162461bcd60e51b815260040161075b906128b5565b805460ff1916815560408051600360208201529081018490526001600160a01b0383166060820152600090608001604051602081830303815290604052905060006001620249f0604051602001610f519291906128e5565b60408051601f1981840301815290829052632f1c2cd560e21b82529150600090309063bc70b35490610fac907f0000000000000000000000000000000000000000000000000000000000000000906003908790600401612918565b600060405180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ff19190810190612990565b905060006110227f00000000000000000000000000000000000000000000000000000000000000008584600061170b565b80519091504710156110535780516040516334b2107560e11b8152600481019190915247602482015260440161075b565b6110997f000000000000000000000000000000000000000000000000000000000000000085846040518060400160405280866000015181526020016000815250306117ec565b506040516001600160a01b0387169088907ff313a768599b60b7f8aedb7757d867d09463365b79b55b86ed3c961e6da5a24990600090a350505050505050565b6110e1611639565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561114457600080fd5b505af1158015611158573d6000803e3d6000fd5b5050505050565b61116a838383611bbc565b505050565b6109978282611e86565b600080828060200190518101906107eb9190612b20565b611198611639565b478111156111df5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161075b565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610997573d6000803e3d6000fd5b611220611639565b6001600160a01b03811661124a57604051631e4fbdf760e01b81526000600482015260240161075b565b611253816116bb565b50565b600060208201803590600190839061126e9086612682565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806112c85760405163f6ff4fb760e01b815263ffffffff8416600482015260240161075b565b92915050565b6040516324fd4c0560e01b815260009060609030906324fd4c05906112f9908a908a90600401612af1565b600060405180830381865afa92505050801561133757506040513d6000823e601f3d908101601f191682016040526113349190810190612b44565b60015b61137c5760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081b595cdcd859d948199bdc9b585d60521b604482015260640161075b565b909250905060001961ffff83160161145557604051634520529560e01b815230906345205295906113b190849060040161252d565b606060405180830381865afa9250505080156113ea575060408051601f3d908101601f191682019092526113e79181019061287c565b60015b6114425760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206172626974726174696f6e2072657175657374207061796c6044820152621bd85960ea1b606482015260840161075b565b61144d838383611bbc565b50505061162e565b60031961ffff831601611526576040516303d9169d60e31b81523090631ec8b4e89061148590849060040161252d565b6040805180830381865afa9250505080156114bd575060408051601f3d908101601f191682019092526114ba918101906127d4565b60015b6115155760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206172626974726174696f6e206661696c757265207061796c6044820152621bd85960ea1b606482015260840161075b565b61151f8282611a35565b505061162e565b60041961ffff8316016115ef57604051633a0245cf60e21b8152309063e809173c9061155690849060040161252d565b6040805180830381865afa92505050801561158e575060408051601f3d908101601f1916820190925261158b91810190612b20565b60015b6115e55760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964206172626974726174696f6e20616e73776572207061796c6f604482015261185960f21b606482015260840161075b565b61151f8282611e86565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206d657373616765207479706560601b604482015260640161075b565b505050505050505050565b6000546001600160a01b03163314610a855760405163118cdaa760e01b815233600482015260240161075b565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff16815260200161176e8961128c565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b81526004016117a3929190612b8a565b6040805180830381865afa1580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190612c51565b95945050505050565b6117f4612170565b60006118038460000151611fac565b60208501519091501561181d5761181d8460200151611fd4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff16815260200161186d8c61128c565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b81526004016118a9929190612b8a565b60806040518083038185885af11580156118c7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906118ec9190612c6d565b979650505050505050565b60005b81518110156119ce5761192982828151811061191857611918612cc7565b602002602001015160400151611a09565b81818151811061193b5761193b612cc7565b6020026020010151604001516002600084848151811061195d5761195d612cc7565b60200260200101516000015163ffffffff1663ffffffff168152602001908152602001600020600084848151811061199757611997612cc7565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816119c59190612d2d565b506001016118fa565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516119fe9190612dec565b60405180910390a150565b600281015161ffff81166003146109975781604051639a6d49cd60e01b815260040161075b919061252d565b81611a525760405162461bcd60e51b815260040161075b90612e69565b6001600160a01b038116611aa85760405162461bcd60e51b815260206004820181905260248201527f5265717565737465722063616e6e6f74206265207a65726f2061646472657373604482015260640161075b565b60008281526004602090815260408083206001600160a01b038516845290915290206003815460ff166005811115611ae257611ae26126ff565b14611aff5760405162461bcd60e51b815260040161075b906128b5565b805460ff19168155604051630ebbdd2b60e41b8152600481018490526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ebbdd2b090602401600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b50506040516001600160a01b03851692508591507f9beda0c81abc1c65da7685f113195974dfddb781dfde6263e5a1b13a5356ffad90600090a3505050565b82611bd95760405162461bcd60e51b815260040161075b90612e69565b6001600160a01b038216611c2f5760405162461bcd60e51b815260206004820181905260248201527f5265717565737465722063616e6e6f74206265207a65726f2061646472657373604482015260640161075b565b60008381526004602090815260408083206001600160a01b0386168452909152812090815460ff166005811115611c6857611c686126ff565b14611cae5760405162461bcd60e51b81526020600482015260166024820152755265717565737420616c72656164792065786973747360501b604482015260640161075b565b60405163f6a94ecb60e01b8152600481018590526001600160a01b038481166024830152604482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f6a94ecb90606401600060405180830381600087803b158015611d1f57600080fd5b505af1925050508015611d30575060015b611e1357611d3c612ea0565b806308c379a003611db35750611d50612ebc565b80611d5b5750611db5565b815460ff191660011782556040516001600160a01b0385169086907ff677e762f2ddc710deec335dd0cfa8a65cc9c9c351b268243be8629f2e8d1b5f90611da59087908690612f45565b60405180910390a350611e80565b505b805460ff19166001178155604080518381526020810182905260008183015290516001600160a01b0385169186917ff677e762f2ddc710deec335dd0cfa8a65cc9c9c351b268243be8629f2e8d1b5f916060908290030190a3611e80565b805460ff1916600217815560008481526005602090815260409182902080546001600160a01b0387166001600160a01b03199091168117909155915184815286917ff56e18fc84dbd66db78337b5bd0973943fa70c9b52243a540bdac79274f6682d910160405180910390a35b50505050565b81611ea35760405162461bcd60e51b815260040161075b90612e69565b6000828152600560205260409020546001600160a01b031680611f085760405162461bcd60e51b815260206004820152601f60248201527f4e6f2072657175657374657220666f756e6420666f72207175657374696f6e00604482015260640161075b565b60008381526004602090815260408083206001600160a01b038516845290915290206003815460ff166005811115611f4257611f426126ff565b14611f5f5760405162461bcd60e51b815260040161075b906128b5565b805460ff191660041781556001810183905560405183815284907f1813d15d8cef51cff8bbd419a8e13e0655c1babea320dea4174d5e7bc40c42949060200160405180910390a250505050565b6000813414611fd0576040516304fb820960e51b815234600482015260240161075b565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190612f5e565b90506001600160a01b038116612081576040516329b99a9560e11b815260040160405180910390fd5b6040805133602482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0381811660448501526064808501889052855180860390910181526084909401909452602080840180516001600160e01b03166323b872dd60e01b1781528451610997968816958993611e8093889360009283929091839182885af180612122576040513d6000823e3d81fd5b50506000513d9150811561213a578060011415612147565b6001600160a01b0384163b155b15611e8057604051635274afe760e01b81526001600160a01b038516600482015260240161075b565b60405180606001604052806000801916815260200160006001600160401b031681526020016121b2604051806040016040528060008152602001600081525090565b905290565b6000606082840312156121c957600080fd5b50919050565b60008083601f8401126121e157600080fd5b5081356001600160401b038111156121f857600080fd5b60208301915083602082850101111561097e57600080fd5b6001600160a01b038116811461125357600080fd5b600080600080600080600060e0888a03121561224057600080fd5b61224a89896121b7565b96506060880135955060808801356001600160401b038082111561226d57600080fd5b6122798b838c016121cf565b909750955060a08a0135915061228e82612210565b90935060c089013590808211156122a457600080fd5b506122b18a828b016121cf565b989b979a50959850939692959293505050565b6000602082840312156122d657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b606081018181106001600160401b0382111715612312576123126122dd565b60405250565b601f8201601f191681016001600160401b038111828210171561233d5761233d6122dd565b6040525050565b60006001600160401b0382111561235d5761235d6122dd565b50601f01601f191660200190565b600082601f83011261237c57600080fd5b813561238781612344565b6040516123948282612318565b8281528560208487010111156123a957600080fd5b82602086016020830137600092810160200192909252509392505050565b6000602082840312156123d957600080fd5b81356001600160401b038111156123ef57600080fd5b610a948482850161236b565b6000806000806080858703121561241157600080fd5b843593506020850135925060408501359150606085013561243181612210565b939692955090935050565b6000806020838503121561244f57600080fd5b82356001600160401b0381111561246557600080fd5b612471858286016121cf565b90969095509350505050565b60005b83811015612498578181015183820152602001612480565b50506000910152565b600081518084526124b981602086016020860161247d565b601f01601f19169290920160200192915050565b61ffff83168152604060208201526000610a9460408301846124a1565b803563ffffffff811681146124fe57600080fd5b919050565b6000806040838503121561251657600080fd5b61251f836124ea565b946020939093013593505050565b60208152600061254060208301846124a1565b9392505050565b61ffff8116811461125357600080fd5b6000806040838503121561256a57600080fd5b612573836124ea565b9150602083013561258381612547565b809150509250929050565b60008060008060a085870312156125a457600080fd5b6125ae86866121b7565b935060608501356001600160401b038111156125c957600080fd5b6125d5878288016121cf565b909450925050608085013561243181612210565b600080604083850312156125fc57600080fd5b82359150602083013561258381612210565b6000806020838503121561262157600080fd5b82356001600160401b038082111561263857600080fd5b818501915085601f83011261264c57600080fd5b81358181111561265b57600080fd5b8660208260051b850101111561267057600080fd5b60209290920196919550909350505050565b60006020828403121561269457600080fd5b612540826124ea565b600080600080606085870312156126b357600080fd5b6126bc856124ea565b935060208501356126cc81612547565b925060408501356001600160401b038111156126e757600080fd5b6126f3878288016121cf565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b604081016006841061273757634e487b7160e01b600052602160045260246000fd5b9281526020015290565b60006020828403121561275357600080fd5b813561254081612210565b60008060006060848603121561277357600080fd5b83359250602084013561278581612210565b929592945050506040919091013590565b600080604083850312156127a957600080fd5b50508035926020909101359150565b6000606082840312156127ca57600080fd5b61254083836121b7565b600080604083850312156127e757600080fd5b82519150602083015161258381612210565b6000806040838503121561280c57600080fd5b823561281781612547565b915060208301356001600160401b0381111561283257600080fd5b61283e8582860161236b565b9150509250929050565b600181811c9082168061285c57607f821691505b6020821081036121c957634e487b7160e01b600052602260045260246000fd5b60008060006060848603121561289157600080fd5b8351925060208401516128a381612210565b80925050604084015190509250925092565b602080825260169082015275496e76616c696420726571756573742073746174757360501b604082015260600190565b60f09290921b6001600160f01b031916825260801b6fffffffffffffffffffffffffffffffff1916600282015260120190565b63ffffffff8416815261ffff831660208201526060604082015260006117e360608301846124a1565b600082601f83011261295257600080fd5b815161295d81612344565b60405161296a8282612318565b82815285602084870101111561297f57600080fd5b6117e383602083016020880161247d565b6000602082840312156129a257600080fd5b81516001600160401b038111156129b857600080fd5b610a9484828501612941565b60006001600160401b03808411156129de576129de6122dd565b8360051b6020604080516129f483850182612318565b8781529286019282810136851115612a0b57600080fd5b875b85811015612a9157803587811115612a255760008081fd5b89016060368290031215612a395760008081fd5b8451612a44816122f3565b612a4d826124ea565b815286820135612a5c81612547565b818801528186013589811115612a725760008081fd5b612a7e3682850161236b565b8288015250835250908401908401612a0d565b509098975050505050505050565b60008085851115612aaf57600080fd5b83861115612abc57600080fd5b5050820193919092039150565b60008451612adb81846020890161247d565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008060408385031215612b3357600080fd5b505080516020909101519092909150565b60008060408385031215612b5757600080fd5b8251612b6281612547565b60208401519092506001600160401b03811115612b7e57600080fd5b61283e85828601612941565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152612bc060e08401826124a1565b90506060850151603f198483030160a0850152612bdd82826124a1565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215612c1557600080fd5b604051604081018181106001600160401b0382111715612c3757612c376122dd565b604052825181526020928301519281019290925250919050565b600060408284031215612c6357600080fd5b6125408383612c03565b600060808284031215612c7f57600080fd5b604051612c8b816122f3565b8251815260208301516001600160401b0381168114612ca957600080fd5b6020820152612cbb8460408501612c03565b60408201529392505050565b634e487b7160e01b600052603260045260246000fd5b601f82111561116a576000816000526020600020601f850160051c81016020861015612d065750805b601f850160051c820191505b81811015612d2557828155600101612d12565b505050505050565b81516001600160401b03811115612d4657612d466122dd565b612d5a81612d548454612848565b84612cdd565b602080601f831160018114612d8f5760008415612d775750858301515b600019600386901b1c1916600185901b178555612d25565b600085815260208120601f198616915b82811015612dbe57888601518255948401946001909101908401612d9f565b5085821015612ddc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015612a9157888303603f190185528151805163ffffffff1684528781015161ffff16888501528601516060878501819052612e55818601836124a1565b968901969450505090860190600101612e15565b6020808252601b908201527f5175657374696f6e2049442063616e6e6f7420626520656d7074790000000000604082015260600190565b600060033d1115612eb95760046000803e5060005160e01c5b90565b600060443d1015612eca5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ef957505050505090565b8285019150815181811115612f115750505050505090565b843d8701016020828501011115612f2b5750505050505090565b612f3a60208286010187612318565b509095945050505050565b828152604060208201526000610a9460408301846124a1565b600060208284031215612f7057600080fd5b81516125408161221056fea2646970667358221220743ff78afedd4012f4c1ecac10c0674fe0c25671cd82b1404ad82df39998940764736f6c63430008180033",
  "devdoc": {
    "details": "This contract is meant to be deployed to side-chains in which Reality.eth is deployed.",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "ArbitrationFailed(bytes32,address)": {
        "details": "This will happen if the arbitration fee increases in between the arbitration request and acknowledgement.",
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "ArbitrationFinished(bytes32)": {
        "params": {
          "_questionID": "The ID of the question."
        }
      },
      "ArbitratorAnswered(bytes32,bytes32)": {
        "params": {
          "_answer": "The answer from the arbitrator.",
          "_questionID": "The ID of the question."
        }
      },
      "RequestAcknowledged(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "RequestCanceled(bytes32,address)": {
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "RequestNotified(bytes32,address,uint256)": {
        "params": {
          "_maxPrevious": "The maximum value of the previous bond for the question.",
          "_questionID": "The ID of the question.",
          "_requester": "The address of the arbitration requester."
        }
      },
      "RequestRejected(bytes32,address,uint256,string)": {
        "details": "This can happen if the current bond for the question is higher than maxPrevious or if the question is already finalized.",
        "params": {
          "_maxPrevious": "The maximum value of the current bond for the question.",
          "_questionID": "The ID of the question.",
          "_reason": "The reason why the request was rejected.",
          "_requester": "The address of the arbitration requester."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "_decodeMessage(bytes)": {
        "details": "These are marked external to be called via try/catch for error handling."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "constructor": {
        "params": {
          "_endpoint": "The LayerZero endpoint address.",
          "_foreignEid": "The endpoint ID where the foreign proxy is deployed.",
          "_metadata": "Metadata for Realitio.",
          "_realitio": "Realitio contract address."
        }
      },
      "handleNotifiedRequest(bytes32,address)": {
        "details": "This method exists because `receiveArbitrationRequest` is called by the AMB and cannot send messages back to it.",
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the user that requested arbitration."
        }
      },
      "handleRejectedRequest(bytes32,address)": {
        "details": "This method exists because `receiveArbitrationRequest` is called by the AMB and cannot send messages back to it. Reasons why the request might be rejected:  - The question does not exist  - The question was not answered yet  - The question bond value changed while the arbitration was being requested  - Another request was already accepted",
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the user that requested arbitration."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveArbitrationAnswer(bytes32,bytes32)": {
        "params": {
          "_answer": "The answer from the arbitrator.",
          "_questionID": "The ID of the question."
        }
      },
      "receiveArbitrationFailure(bytes32,address)": {
        "details": "Currently this can happen only if the arbitration cost increased.",
        "params": {
          "_questionID": "The ID of the question.",
          "_requester": "The address of the user that requested arbitration."
        }
      },
      "receiveArbitrationRequest(bytes32,address,uint256)": {
        "details": "Receives the requested arbitration for a question. TRUSTED.",
        "params": {
          "_maxPrevious": "The maximum value of the previous bond for the question.",
          "_questionID": "The ID of the question.",
          "_requester": "The address of the user that requested arbitration."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "reportArbitrationAnswer(bytes32,bytes32,bytes32,address)": {
        "details": "The Realitio contract validates the input parameters passed to this method, so making this publicly accessible is safe.",
        "params": {
          "_lastAnswerOrCommitmentID": "The last answer given, or its commitment ID if it was a commitment, to the question in the Realitio contract.",
          "_lastAnswerer": "The last answerer to the question in the Realitio contract.",
          "_lastHistoryHash": "The history hash given with the last answer to the question in the Realitio contract.",
          "_questionID": "The ID of the question."
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH(uint256)": {
        "params": {
          "_amount": "The amount of ETH to withdraw."
        }
      }
    },
    "stateVariables": {
      "foreignEid": {
        "details": "The endpoint ID where the foreign proxy is deployed."
      },
      "metadata": {
        "details": "Metadata for Realitio interface."
      },
      "questionIDToRequester": {
        "details": "Associates a question ID with the requester who succeeded in requesting arbitration. questionIDToRequester[questionID]"
      },
      "realitio": {
        "details": "The address of the Realitio contract (v2.1+ required). TRUSTED."
      },
      "requests": {
        "details": "Associates an arbitration request with a question ID and a requester address. requests[questionID][requester]"
      }
    },
    "title": "Arbitration proxy for Realitio on the Oracle side (A.K.A. the Home Chain).",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ArbitrationFailed(bytes32,address)": {
        "notice": "To be emitted when the dispute could not be created on the Foreign Chain."
      },
      "ArbitrationFinished(bytes32)": {
        "notice": "To be emitted when reporting the arbitrator answer to Realitio."
      },
      "ArbitratorAnswered(bytes32,bytes32)": {
        "notice": "To be emitted when receiving the answer from the arbitrator."
      },
      "RequestAcknowledged(bytes32,address)": {
        "notice": "To be emitted when the arbitration request acknowledgement is sent to the Foreign Chain."
      },
      "RequestCanceled(bytes32,address)": {
        "notice": "To be emitted when the arbitration request is canceled."
      },
      "RequestNotified(bytes32,address,uint256)": {
        "notice": "To be emitted when the Realitio contract has been notified of an arbitration request."
      },
      "RequestRejected(bytes32,address,uint256,string)": {
        "notice": "To be emitted when arbitration request is rejected."
      }
    },
    "kind": "user",
    "methods": {
      "_decodeMessage(bytes)": {
        "notice": "External decoder functions for safe message parsing."
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "constructor": {
        "notice": "Creates an arbitration proxy on the home chain."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "handleNotifiedRequest(bytes32,address)": {
        "notice": "Handles arbitration request after it has been notified to Realitio for a given question."
      },
      "handleRejectedRequest(bytes32,address)": {
        "notice": "Handles arbitration request after it has been rejected."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "receiveArbitrationAnswer(bytes32,bytes32)": {
        "notice": "Receives an answer to a specified question. TRUSTED."
      },
      "receiveArbitrationFailure(bytes32,address)": {
        "notice": "Receives a failed attempt to request arbitration. TRUSTED."
      },
      "reportArbitrationAnswer(bytes32,bytes32,bytes32,address)": {
        "notice": "Reports the answer provided by the arbitrator to a specified question."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "withdrawETH(uint256)": {
        "notice": "Allows the owner to withdraw ETH from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1694,
        "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 946,
        "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1542,
        "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 3979,
        "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
        "label": "metadata",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4000,
        "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Request)3992_storage))"
      },
      {
        "astId": 4005,
        "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
        "label": "questionIDToRequester",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Status)3986": {
        "encoding": "inplace",
        "label": "enum RealitioHomeProxyLZ.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Request)3992_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RealitioHomeProxyLZ.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)3992_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Request)3992_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct RealitioHomeProxyLZ.Request))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Request)3992_storage)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Request)3992_storage": {
        "encoding": "inplace",
        "label": "struct RealitioHomeProxyLZ.Request",
        "members": [
          {
            "astId": 3989,
            "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)3986"
          },
          {
            "astId": 3991,
            "contract": "src/RealitioHomeProxyLZ.sol:RealitioHomeProxyLZ",
            "label": "arbitratorAnswer",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}